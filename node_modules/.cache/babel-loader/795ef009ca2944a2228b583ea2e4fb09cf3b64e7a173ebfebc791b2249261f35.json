{"ast":null,"code":"import t, { useRef as a, useCallback as e, useEffect as r } from \"react\";\nfunction i(t, a) {\n  (null == a || a > t.length) && (a = t.length);\n  for (var e = 0, r = Array(a); e < a; e++) r[e] = t[e];\n  return r;\n}\nfunction o(t, a, e) {\n  return (a = function (t) {\n    var a = function (t, a) {\n      if (\"object\" != typeof t || !t) return t;\n      var e = t[Symbol.toPrimitive];\n      if (void 0 !== e) {\n        var r = e.call(t, a || \"default\");\n        if (\"object\" != typeof r) return r;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n      }\n      return (\"string\" === a ? String : Number)(t);\n    }(t, \"string\");\n    return \"symbol\" == typeof a ? a : a + \"\";\n  }(a)) in t ? Object.defineProperty(t, a, {\n    value: e,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : t[a] = e, t;\n}\nfunction n(t, a) {\n  var e = Object.keys(t);\n  if (Object.getOwnPropertySymbols) {\n    var r = Object.getOwnPropertySymbols(t);\n    a && (r = r.filter(function (a) {\n      return Object.getOwnPropertyDescriptor(t, a).enumerable;\n    })), e.push.apply(e, r);\n  }\n  return e;\n}\nfunction h(t) {\n  for (var a = 1; a < arguments.length; a++) {\n    var e = null != arguments[a] ? arguments[a] : {};\n    a % 2 ? n(Object(e), !0).forEach(function (a) {\n      o(t, a, e[a]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(e)) : n(Object(e)).forEach(function (a) {\n      Object.defineProperty(t, a, Object.getOwnPropertyDescriptor(e, a));\n    });\n  }\n  return t;\n}\nfunction l(t, a) {\n  return function (t) {\n    if (Array.isArray(t)) return t;\n  }(t) || function (t, a) {\n    var e = null == t ? null : \"undefined\" != typeof Symbol && t[Symbol.iterator] || t[\"@@iterator\"];\n    if (null != e) {\n      var r,\n        i,\n        o,\n        n,\n        h = [],\n        l = !0,\n        d = !1;\n      try {\n        if (o = (e = e.call(t)).next, 0 === a) {\n          if (Object(e) !== e) return;\n          l = !1;\n        } else for (; !(l = (r = o.call(e)).done) && (h.push(r.value), h.length !== a); l = !0);\n      } catch (t) {\n        d = !0, i = t;\n      } finally {\n        try {\n          if (!l && null != e.return && (n = e.return(), Object(n) !== n)) return;\n        } finally {\n          if (d) throw i;\n        }\n      }\n      return h;\n    }\n  }(t, a) || function (t, a) {\n    if (t) {\n      if (\"string\" == typeof t) return i(t, a);\n      var e = {}.toString.call(t).slice(8, -1);\n      return \"Object\" === e && t.constructor && (e = t.constructor.name), \"Map\" === e || \"Set\" === e ? Array.from(t) : \"Arguments\" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? i(t, a) : void 0;\n    }\n  }(t, a) || function () {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }();\n}\nvar d = function (t, a) {\n    for (var e = [], r = 0; r < 150; r++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      radius: 2 * Math.random(),\n      vx: Math.floor(50 * Math.random()) - 25,\n      vy: Math.floor(50 * Math.random()) - 25,\n      twinkle: Math.random()\n    });\n    return function () {\n      a.fillStyle = \"rgba(15, 23, 42, 0.1)\", a.fillRect(0, 0, t.width, t.height), a.fillStyle = \"#FFF\", e.forEach(function (e) {\n        e.twinkle += .02;\n        var r = Math.abs(Math.sin(e.twinkle));\n        a.beginPath(), a.arc(e.x, e.y, e.radius, 0, 2 * Math.PI), a.fillStyle = \"rgba(255, 255, 255, \".concat(r, \")\"), a.fill(), e.x += e.vx / 60, e.y += e.vy / 60, (e.x < 0 || e.x > t.width) && (e.vx = -e.vx), (e.y < 0 || e.y > t.height) && (e.vy = -e.vy);\n      });\n    };\n  },\n  c = function (t, a) {\n    for (var e = [], r = 0; r < 75; r++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      radius: 30 * Math.random() + 5,\n      speed: .7 * Math.random() + .1,\n      color: \"hsla(\".concat(360 * Math.random(), \", 70%, 60%, 0.6)\")\n    });\n    return function () {\n      a.fillStyle = \"rgba(30, 41, 59, 0.1)\", a.fillRect(0, 0, t.width, t.height), e.forEach(function (e) {\n        a.beginPath(), a.arc(e.x, e.y, e.radius, 0, 2 * Math.PI), a.fillStyle = e.color, a.fill(), a.strokeStyle = \"rgba(255, 255, 255, 0.3)\", a.stroke(), e.y -= e.speed, e.x += .5 * Math.sin(.03 * e.y), e.y + e.radius < 0 && (e.y = t.height + e.radius, e.x = Math.random() * t.width);\n      });\n    };\n  },\n  f = function (t, a) {\n    var e = 0;\n    return function () {\n      e += .01;\n      var r = a.createLinearGradient(0, 0, t.width, t.height);\n      r.addColorStop(0, \"hsl(\".concat(10 * e % 360, \", 70%, 50%)\")), r.addColorStop(1, \"hsl(\".concat((10 * e + 180) % 360, \", 70%, 50%)\")), a.fillStyle = r, a.fillRect(0, 0, t.width, t.height);\n      for (var i = 0; i < 7; i++) {\n        a.beginPath(), a.moveTo(0, .15 * t.height * i + 30 * Math.sin(e + i));\n        for (var o = 0; o < t.width; o += 10) a.lineTo(o, .15 * t.height * i + 30 * Math.sin(e + i + .01 * o));\n        a.strokeStyle = \"rgba(255, 255, 255, \".concat(.1 - .01 * i, \")\"), a.lineWidth = 2, a.stroke();\n      }\n    };\n  },\n  s = function (t, a) {\n    for (var e = [], r = 0; r < 150; r++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      radius: 3 * Math.random() + 1,\n      vx: 1.5 * Math.random() - .75,\n      vy: 1.5 * Math.random() - .75,\n      color: \"hsl(\".concat(360 * Math.random(), \", 70%, 70%)\")\n    });\n    return function () {\n      a.fillStyle = \"rgba(15, 23, 42, 0.1)\", a.fillRect(0, 0, t.width, t.height), e.forEach(function (e) {\n        e.x += e.vx, e.y += e.vy, (e.x < 0 || e.x > t.width) && (e.vx *= -1), (e.y < 0 || e.y > t.height) && (e.vy *= -1), a.beginPath(), a.arc(e.x, e.y, e.radius, 0, 2 * Math.PI), a.fillStyle = e.color, a.fill();\n      });\n      for (var r = 0; r < e.length; r++) for (var i = r + 1; i < e.length; i++) {\n        var o = e[r].x - e[i].x,\n          n = e[r].y - e[i].y,\n          h = Math.sqrt(o * o + n * n);\n        h < 120 && (a.beginPath(), a.moveTo(e[r].x, e[r].y), a.lineTo(e[i].x, e[i].y), a.strokeStyle = \"rgba(255, 255, 255, \".concat(1 - h / 120, \")\"), a.lineWidth = .5, a.stroke());\n      }\n    };\n  },\n  g = function (t, a) {\n    var e = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1e-4,\n      r = function (t, a) {\n        for (var e = [], r = 0; r < a; r++) {\n          var i = Math.random() * t.width * .4,\n            o = Math.random() * Math.PI * 2;\n          e.push({\n            x: Math.cos(o) * i,\n            y: Math.sin(o) * i,\n            radius: 1.5 * Math.random() + .5,\n            color: \"hsl(\".concat(60 * Math.random() + 200, \", 80%, 70%)\"),\n            angle: o,\n            distance: i\n          });\n        }\n        return e;\n      }(t, 2e3),\n      i = 0;\n    return function () {\n      a.fillStyle = \"rgba(10, 10, 30, 0.1)\", a.fillRect(0, 0, t.width, t.height), a.save(), a.translate(t.width / 2, t.height / 2), a.rotate(i), function (t, a, e, r) {\n        a.forEach(function (a) {\n          var e = Math.cos(a.angle) * a.distance,\n            i = Math.sin(a.angle) * a.distance;\n          t.beginPath(), t.arc(e, i, a.radius, 0, 2 * Math.PI), t.fillStyle = a.color, t.fill(), a.angle += r / (8e-5 * a.distance);\n        });\n      }(a, r, 0, e), a.restore(), i += e;\n    };\n  },\n  y = function (t, a) {\n    var e = 0,\n      r = [\"#FF0000\", \"#FF7F00\", \"#FFFF00\", \"#00FF00\", \"#0000FF\", \"#4B0082\", \"#8B00FF\"];\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 0, 0.05)\", a.fillRect(0, 0, t.width, t.height), e += .02;\n      for (var i = 0; i < 7; i++) {\n        a.beginPath(), a.moveTo(0, t.height / 2);\n        for (var o = 0; o < t.width; o++) {\n          var n = 50 * Math.sin(.01 * o + e + .5 * i) + 25 * Math.cos(.02 * o + .7 * e + .3 * i) + t.height / 2;\n          a.lineTo(o, n);\n        }\n        a.strokeStyle = r[i % r.length], a.lineWidth = 4, a.stroke();\n      }\n    };\n  },\n  u = function (t, a) {\n    var e = 0,\n      r = [{\n        pos: 0,\n        color: \"rgba(0, 255, 128, 0.5)\"\n      }, {\n        pos: .5,\n        color: \"rgba(0, 128, 255, 0.5)\"\n      }, {\n        pos: 1,\n        color: \"rgba(128, 0, 255, 0.5)\"\n      }];\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 20, 0.1)\", a.fillRect(0, 0, t.width, t.height), e += .005;\n      for (var i = function () {\n          var i = a.createLinearGradient(0, 0, t.width, 0);\n          r.forEach(function (t) {\n            i.addColorStop(t.pos, t.color);\n          }), a.beginPath();\n          for (var n = 0; n < t.width; n++) {\n            var h = 50 * Math.sin(.01 * n + e + o) + 30 * Math.sin(.02 * n - 1.5 * e + o) + t.height * (.4 + .2 * o);\n            a.lineTo(n, h);\n          }\n          a.lineTo(t.width, t.height), a.lineTo(0, t.height), a.closePath(), a.fillStyle = i, a.fill();\n        }, o = 0; o < 3; o++) i();\n    };\n  },\n  M = function (t, a) {\n    for (var e = [], r = [\"#FF00FF\", \"#00FFFF\", \"#FFFF00\", \"#FF00AA\"], i = 0; i < 20; i++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      radius: 50 * Math.random() + 20,\n      color: r[Math.floor(Math.random() * r.length)],\n      phase: Math.random() * Math.PI * 2\n    });\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 0, 0.1)\", a.fillRect(0, 0, t.width, t.height), e.forEach(function (t) {\n        var e = 20 * Math.sin(t.phase) + 30,\n          r = a.createRadialGradient(t.x, t.y, 0, t.x, t.y, t.radius);\n        r.addColorStop(0, t.color), r.addColorStop(1, \"rgba(0, 0, 0, 0)\"), a.beginPath(), a.arc(t.x, t.y, t.radius + e, 0, 2 * Math.PI), a.fillStyle = r, a.fill(), t.phase += .05;\n      });\n    };\n  },\n  m = function (t, a) {\n    for (var e = [], r = 0; r < 300; r++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      size: 2 * Math.random() + .5,\n      speedX: .5 * (Math.random() - .5),\n      speedY: .5 * (Math.random() - .5),\n      color: \"hsl(\".concat(60 * Math.random() + 180, \", 100%, 70%)\")\n    });\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 20, 0.05)\", a.fillRect(0, 0, t.width, t.height), e.forEach(function (e) {\n        a.beginPath(), a.arc(e.x, e.y, e.size, 0, 2 * Math.PI), a.fillStyle = e.color, a.fill(), e.x += e.speedX, e.y += e.speedY, (e.x < 0 || e.x > t.width) && (e.speedX *= -1), (e.y < 0 || e.y > t.height) && (e.speedY *= -1);\n      });\n    };\n  },\n  p = function (t, a) {\n    var e = [];\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 20, 0.2)\", a.fillRect(0, 0, t.width, t.height), Math.random() < .1 && e.push(function () {\n        for (var a = Math.random() * t.width, e = 0, r = [{\n            x: a,\n            y: e\n          }]; e < t.height;) a += 50 * (Math.random() - .5), e += 20 * Math.random() + 10, r.push({\n          x: a,\n          y: e\n        });\n        return {\n          points: r,\n          life: 5 + 5 * Math.random(),\n          width: 3 * Math.random() + 1\n        };\n      }()), e.forEach(function (t, r) {\n        a.beginPath(), a.moveTo(t.points[0].x, t.points[0].y);\n        for (var i = 1; i < t.points.length; i++) a.lineTo(t.points[i].x, t.points[i].y);\n        a.strokeStyle = \"rgba(180, 220, 255, \".concat(t.life / 10, \")\"), a.lineWidth = t.width, a.stroke(), t.life -= .2, t.life <= 0 && e.splice(r, 1);\n      });\n    };\n  },\n  x = function (t, a) {\n    for (var e = [], r = 0; r < 100; r++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      size: 4 * Math.random() + 1,\n      speedX: 2 * (Math.random() - .5),\n      speedY: 2 * (Math.random() - .5),\n      hue: 360 * Math.random()\n    });\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 0, 0.05)\", a.fillRect(0, 0, t.width, t.height), e.forEach(function (r) {\n        r.x += r.speedX, r.y += r.speedY, (r.x < 0 || r.x > t.width) && (r.speedX *= -1), (r.y < 0 || r.y > t.height) && (r.speedY *= -1), a.beginPath(), a.arc(r.x, r.y, r.size, 0, 2 * Math.PI), a.fillStyle = \"hsla(\".concat(r.hue, \", 100%, 50%, 0.8)\"), a.fill(), e.forEach(function (t) {\n          var e = r.x - t.x,\n            i = r.y - t.y,\n            o = Math.sqrt(e * e + i * i);\n          o < 100 && (a.beginPath(), a.moveTo(r.x, r.y), a.lineTo(t.x, t.y), a.strokeStyle = \"hsla(\".concat((r.hue + t.hue) / 2, \", 100%, 50%, \").concat(1 - o / 100, \")\"), a.stroke());\n        }), r.hue = (r.hue + .5) % 360;\n      });\n    };\n  },\n  v = function (t, a) {\n    for (var e = [], r = 0; r < 50; r++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      size: 30 * Math.random() + 10,\n      type: Math.floor(3 * Math.random()),\n      rotation: Math.random() * Math.PI * 2,\n      speed: .5 * Math.random() + .1,\n      color: \"hsl(\".concat(360 * Math.random(), \", 70%, 50%)\")\n    });\n    return function () {\n      a.clearRect(0, 0, t.width, t.height), e.forEach(function (e) {\n        switch (a.save(), a.translate(e.x, e.y), a.rotate(e.rotation), a.fillStyle = e.color, e.type) {\n          case 0:\n            a.fillRect(-e.size / 2, -e.size / 2, e.size, e.size);\n            break;\n          case 1:\n            a.beginPath(), a.arc(0, 0, e.size / 2, 0, 2 * Math.PI), a.fill();\n            break;\n          case 2:\n            a.beginPath(), a.moveTo(0, -e.size / 2), a.lineTo(e.size / 2, e.size / 2), a.lineTo(-e.size / 2, e.size / 2), a.closePath(), a.fill();\n        }\n        a.restore(), e.rotation += .05 * e.speed, e.y += e.speed, e.y > t.height + e.size && (e.y = -e.size, e.x = Math.random() * t.width);\n      });\n    };\n  },\n  b = function (t, a) {\n    for (var e = [], r = 0; r < 100; r++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      size: 3 * Math.random() + 1,\n      speed: .5 * Math.random() + .1,\n      brightness: Math.random(),\n      angle: Math.random() * Math.PI * 2\n    });\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 0, 0.1)\", a.fillRect(0, 0, t.width, t.height), e.forEach(function (e) {\n        e.brightness += .1 * Math.random() - .05, e.brightness = Math.max(0, Math.min(1, e.brightness)), a.beginPath(), a.arc(e.x, e.y, e.size, 0, 2 * Math.PI), a.fillStyle = \"rgba(255, 255, 100, \".concat(e.brightness, \")\"), a.fill(), e.x += Math.cos(e.angle) * e.speed, e.y += Math.sin(e.angle) * e.speed, (e.x < 0 || e.x > t.width || e.y < 0 || e.y > t.height) && (e.angle += Math.PI), Math.random() < .01 && (e.angle = Math.random() * Math.PI * 2);\n      });\n    };\n  },\n  w = function (t, a) {\n    for (var e = Math.floor(t.width / 20), r = [], i = 0; i < e; i++) r[i] = Math.random() * t.height;\n    var o = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+[]{}|;:,.<>?\";\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 0, 0.05)\", a.fillRect(0, 0, t.width, t.height), a.fillStyle = \"#0F0\", a.font = \"15px monospace\";\n      for (var e = 0; e < r.length; e++) {\n        var i = o[Math.floor(85 * Math.random())];\n        a.fillText(i, 20 * e, 20 * r[e]), 20 * r[e] > t.height && Math.random() > .975 && (r[e] = 0), r[e] += .6;\n      }\n    };\n  },\n  S = function (t, a) {\n    var e = 0;\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 0, 0.1)\", a.fillRect(0, 0, t.width, t.height), a.save(), a.translate(t.width / 2, t.height / 2);\n      for (var r = 0; r < 2; r++) {\n        a.beginPath();\n        for (var i = -t.width / 2; i < t.width / 2; i += 10) {\n          var o = 100 + 50 * Math.sin(.01 * i + e + r * Math.PI);\n          a.lineTo(i, o);\n        }\n        a.strokeStyle = 0 === r ? \"rgba(255, 0, 0, 0.5)\" : \"rgba(0, 0, 255, 0.5)\", a.lineWidth = 2, a.stroke();\n        for (var n = -t.width / 2; n < t.width / 2; n += 40) {\n          var h = 100 + 50 * Math.sin(.01 * n + e + r * Math.PI);\n          a.fillStyle = 0 === r ? \"rgba(255, 255, 0, 0.8)\" : \"rgba(0, 255, 0, 0.8)\", a.beginPath(), a.arc(n, h, 5, 0, 2 * Math.PI), a.fill();\n        }\n      }\n      a.restore(), e += .02;\n    };\n  },\n  P = function (t, a) {\n    var e = [],\n      r = [],\n      i = a.createLinearGradient(0, 0, t.width, t.height);\n    i.addColorStop(0, \"#000000\"), i.addColorStop(1, \"#1a1a2e\");\n    for (var o = 0; o < 30; o++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      vx: .3 * (Math.random() - .5),\n      vy: .3 * (Math.random() - .5),\n      size: 2 * Math.random() + 2\n    });\n    for (var n = 0; n < e.length; n++) for (var h = n + 1; h < e.length; h++) Math.random() < .2 && r.push([n, h]);\n    return function () {\n      a.fillStyle = i, a.fillRect(0, 0, t.width, t.height), e.forEach(function (e, r) {\n        e.x += e.vx, e.y += e.vy, (e.x < 0 || e.x > t.width) && (e.vx *= -1), (e.y < 0 || e.y > t.height) && (e.vy *= -1), a.beginPath(), a.arc(e.x, e.y, e.size, 0, 2 * Math.PI), a.fillStyle = \"hsl(\".concat(12 * r, \", 100%, 50%)\"), a.fill(), a.beginPath(), a.arc(e.x, e.y, e.size + 3, 0, 2 * Math.PI);\n        var i = a.createRadialGradient(e.x, e.y, e.size, e.x, e.y, e.size + 3);\n        i.addColorStop(0, \"hsla(\".concat(12 * r, \", 100%, 50%, 0.8)\")), i.addColorStop(1, \"hsla(\".concat(12 * r, \", 100%, 50%, 0)\")), a.fillStyle = i, a.fill();\n      }), r.forEach(function (r) {\n        var i = l(r, 2),\n          o = i[0],\n          n = i[1],\n          h = e[o].x - e[n].x,\n          d = e[o].y - e[n].y,\n          c = 1 - Math.sqrt(h * h + d * d) / Math.max(t.width, t.height);\n        a.beginPath(), a.moveTo(e[o].x, e[o].y), a.lineTo(e[n].x, e[n].y), a.strokeStyle = \"rgba(255, 255, 255, \".concat(.2 * c, \")\"), a.stroke();\n      });\n      for (var o = 0; o < 5; o++) a.beginPath(), a.arc(Math.random() * t.width, Math.random() * t.height, 1.5 * Math.random(), 0, 2 * Math.PI), a.fillStyle = \"rgba(255, 255, 255, 0.5)\", a.fill();\n    };\n  },\n  z = function (t, a) {\n    var e = 0,\n      r = a.createLinearGradient(0, 0, 0, .6 * t.height);\n    r.addColorStop(0, \"#87CEEB\"), r.addColorStop(1, \"#E0F6FF\");\n    var i = {\n        x: .8 * t.width,\n        y: .2 * t.height,\n        radius: 40,\n        glow: 20\n      },\n      o = [{\n        x: .1 * t.width,\n        y: .15 * t.height,\n        radius: 30\n      }, {\n        x: .3 * t.width,\n        y: .1 * t.height,\n        radius: 40\n      }, {\n        x: .6 * t.width,\n        y: .2 * t.height,\n        radius: 35\n      }];\n    return function () {\n      a.fillStyle = r, a.fillRect(0, 0, t.width, .6 * t.height), a.save(), a.beginPath(), a.arc(i.x, i.y, i.radius, 0, 2 * Math.PI);\n      var n = a.createRadialGradient(i.x, i.y, i.radius - i.glow, i.x, i.y, i.radius + i.glow);\n      n.addColorStop(0, \"rgba(255, 255, 0, 1)\"), n.addColorStop(.8, \"rgba(255, 255, 0, 0.3)\"), n.addColorStop(1, \"rgba(255, 255, 0, 0)\"), a.fillStyle = n, a.fill(), a.restore(), o.forEach(function (t) {\n        a.beginPath(), a.arc(t.x, t.y, t.radius, 0, 2 * Math.PI), a.fillStyle = \"rgba(255, 255, 255, 0.8)\", a.fill();\n      });\n      for (var h = 0; h < 7; h++) {\n        a.beginPath(), a.moveTo(0, t.height);\n        for (var l = 0; l <= t.width; l += 5) {\n          var d = 30 * Math.sin(.02 * l + e + .5 * h) * (1 + .1 * h) + (t.height - (h + 1) * (.4 * t.height / 7));\n          a.lineTo(l, d);\n        }\n        a.lineTo(t.width, t.height);\n        var c = a.createLinearGradient(0, 0, 0, t.height);\n        c.addColorStop(0, \"rgba(0, 100, 255, \".concat(.1 + h / 7 * .15, \")\")), c.addColorStop(1, \"rgba(0, 50, 200, \".concat(.1 + h / 7 * .15, \")\")), a.fillStyle = c, a.fill();\n      }\n      e += .03;\n    };\n  },\n  I = function (t, a) {\n    var e = [],\n      r = a.createLinearGradient(0, 0, 0, t.height);\n    r.addColorStop(0, \"#0c1445\"), r.addColorStop(1, \"#1c2754\");\n    for (var i = {\n        x: .8 * t.width,\n        y: .2 * t.height,\n        radius: 50,\n        glow: 20\n      }, o = [{\n        points: [[0, t.height], [.3 * t.width, .7 * t.height], [.5 * t.width, t.height]],\n        color: \"#0a1128\"\n      }, {\n        points: [[.4 * t.width, t.height], [.7 * t.width, .75 * t.height], [t.width, t.height]],\n        color: \"#0d1636\"\n      }], n = 0; n < 200; n++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      vx: 1.5 * (Math.random() - .5),\n      vy: 1 * Math.random() + .5,\n      size: 3 * Math.random() + 1,\n      opacity: .5 * Math.random() + .5\n    });\n    return function () {\n      a.fillStyle = r, a.fillRect(0, 0, t.width, t.height), a.save(), a.beginPath(), a.arc(i.x, i.y, i.radius, 0, 2 * Math.PI);\n      var n = a.createRadialGradient(i.x, i.y, i.radius - i.glow, i.x, i.y, i.radius + i.glow);\n      n.addColorStop(0, \"rgba(255, 255, 230, 1)\"), n.addColorStop(.5, \"rgba(255, 255, 230, 0.3)\"), n.addColorStop(1, \"rgba(255, 255, 230, 0)\"), a.fillStyle = n, a.fill(), a.restore(), o.forEach(function (t) {\n        a.beginPath(), a.moveTo(t.points[0][0], t.points[0][1]), t.points.forEach(function (t) {\n          return a.lineTo(t[0], t[1]);\n        }), a.fillStyle = t.color, a.fill();\n      }), e.forEach(function (e) {\n        e.x += e.vx + .3 * Math.sin(.01 * e.y), e.y += e.vy, e.y > t.height && (e.x = Math.random() * t.width, e.y = -e.size, e.vx = 1.5 * (Math.random() - .5), e.vy = 1 * Math.random() + .5), a.beginPath(), a.arc(e.x, e.y, e.size, 0, 2 * Math.PI), a.fillStyle = \"rgba(255, 255, 255, \".concat(e.opacity, \")\"), a.fill();\n      }), a.fillStyle = \"rgba(255, 255, 255, 0.03)\", a.fillRect(0, 0, t.width, t.height);\n    };\n  },\n  E = function (t, a) {\n    for (var e = [], r = [], i = 0; i < 5; i++) r.push({\n      x: Math.random() * t.width,\n      y: t.height,\n      height: 200 * Math.random() + 300,\n      width: 100 * Math.random() + 50\n    });\n    for (var o = 0; o < 100; o++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      radius: 2 * Math.random() + 1,\n      speed: .5 * Math.random() + .1,\n      angle: Math.random() * Math.PI * 2,\n      angleSpeed: .01 * (Math.random() - .5),\n      glowIntensity: Math.random()\n    });\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 20, 0.1)\", a.fillRect(0, 0, t.width, t.height), r.forEach(function (t) {\n        a.beginPath(), a.moveTo(t.x, t.y), a.lineTo(t.x - t.width / 2, t.y - t.height), a.lineTo(t.x + t.width / 2, t.y - t.height), a.closePath(), a.fillStyle = \"rgba(0, 50, 0, 0.8)\", a.fill();\n      }), e.forEach(function (e) {\n        e.x += Math.cos(e.angle) * e.speed, e.y += Math.sin(e.angle) * e.speed, e.angle += e.angleSpeed, (e.x < 0 || e.x > t.width) && (e.angle = Math.PI - e.angle), (e.y < 0 || e.y > t.height) && (e.angle = -e.angle), e.glowIntensity = .5 * Math.sin(.002 * Date.now() + .1 * e.x) + .5, a.beginPath(), a.arc(e.x, e.y, e.radius, 0, 2 * Math.PI), a.fillStyle = \"rgba(255, 255, 100, \".concat(e.glowIntensity, \")\"), a.fill(), a.beginPath(), a.arc(e.x, e.y, 3 * e.radius, 0, 2 * Math.PI);\n        var r = a.createRadialGradient(e.x, e.y, 0, e.x, e.y, 3 * e.radius);\n        r.addColorStop(0, \"rgba(255, 255, 100, \".concat(.5 * e.glowIntensity, \")\")), r.addColorStop(1, \"rgba(255, 255, 100, 0)\"), a.fillStyle = r, a.fill();\n      });\n    };\n  },\n  T = function (t, a) {\n    var e,\n      r = [];\n    function i(t, a) {\n      for (var e = Math.floor(50 * Math.random()) + 50, r = [], i = 0; i < e; i++) r.push({\n        x: t + 200 * Math.random() - 100,\n        y: a + 100 * Math.random() - 50,\n        radius: 30 * Math.random() + 10\n      });\n      return {\n        particles: r,\n        x: t,\n        y: a,\n        speed: .5 * Math.random() + .1\n      };\n    }\n    for (var o = 0; o < 10; o++) r.push(i(Math.random() * t.width, Math.random() * (t.height / 2)));\n    var n = function () {\n        e = t.height;\n        var r = a.createLinearGradient(0, 0, 0, e);\n        return r.addColorStop(0, \"#1e90ff\"), r.addColorStop(.5, \"#87ceeb\"), r.addColorStop(1, \"#e6f3ff\"), r;\n      },\n      h = n();\n    return function () {\n      e !== t.height && (h = n()), a.fillStyle = h, a.fillRect(0, 0, t.width, t.height), r.forEach(function (e) {\n        e.x += e.speed, e.x > t.width + 200 && (e.x = -200), a.save(), a.translate(e.x, e.y), e.particles.forEach(function (t) {\n          a.beginPath(), a.arc(t.x + 5, t.y + 5, t.radius, 0, 2 * Math.PI), a.fillStyle = \"rgba(0, 0, 0, 0.1)\", a.fill();\n        }), e.particles.forEach(function (t) {\n          a.beginPath(), a.arc(t.x, t.y, t.radius, 0, 2 * Math.PI);\n          var e = a.createRadialGradient(t.x, t.y, 0, t.x, t.y, t.radius);\n          e.addColorStop(0, \"rgba(255, 255, 255, 0.8)\"), e.addColorStop(1, \"rgba(255, 255, 255, 0.2)\"), a.fillStyle = e, a.fill();\n        }), a.restore();\n      });\n      a.beginPath(), a.arc(t.width - 100, 100, 40, 0, 2 * Math.PI);\n      var i = a.createRadialGradient(t.width - 100, 100, 0, t.width - 100, 100, 60);\n      i.addColorStop(0, \"rgba(255, 255, 200, 1)\"), i.addColorStop(.8, \"rgba(255, 255, 0, 0.3)\"), i.addColorStop(1, \"rgba(255, 255, 0, 0)\"), a.fillStyle = i, a.fill();\n    };\n  },\n  F = function (t, a) {\n    var e,\n      r = [],\n      i = [\"#ff6b6b\", \"#feca57\", \"#ff9ff3\", \"#ff9f43\", \"#e17055\"],\n      o = [\"1.jpg\", \"2.jpg\"],\n      n = [],\n      h = !1;\n    e = 0, o.forEach(function (t, a) {\n      var r = new Image();\n      r.onload = function () {\n        n[a] = r, ++e === o.length && (h = !0);\n      }, r.onerror = function () {\n        ++e === o.length && (h = !0);\n      }, r.src = t;\n    });\n    for (var l = 0; l < 100; l++) r.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      size: 20 * Math.random() + 10,\n      speed: 2 * Math.random() + 1,\n      amplitude: 20 * Math.random() + 10,\n      angle: Math.random() * Math.PI * 2,\n      angleSpeed: .05 * (Math.random() - .5),\n      imageIndex: Math.floor(Math.random() * o.length),\n      color: i[Math.floor(Math.random() * i.length)]\n    });\n    return function () {\n      a.fillStyle = \"rgba(135, 206, 235, 0.1)\", a.fillRect(0, 0, t.width, t.height), r.forEach(function (e) {\n        e.y += e.speed, e.x += Math.sin(.01 * e.y) * e.amplitude * .05, e.angle += e.angleSpeed, e.y > t.height && (e.y = -e.size, e.x = Math.random() * t.width), function (t) {\n          a.save(), a.translate(t.x, t.y), a.rotate(t.angle), h && n[t.imageIndex] ? a.drawImage(n[t.imageIndex], -t.size / 2, -t.size / 2, t.size, t.size) : (a.beginPath(), a.ellipse(0, 0, t.size / 2, t.size / 4, 0, 0, 2 * Math.PI), a.fillStyle = t.color, a.fill()), a.restore();\n        }(e);\n      });\n    };\n  },\n  C = function (t, a) {\n    for (var e = [], r = [], i = 0; i < 1e3; i++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      length: 20 * Math.random() + 10,\n      speed: 10 * Math.random() + 15\n    });\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 0, 0.1)\", a.fillRect(0, 0, t.width, t.height), a.strokeStyle = \"rgba(174, 194, 224, 0.5)\", a.lineWidth = 1, e.forEach(function (e) {\n        a.beginPath(), a.moveTo(e.x, e.y), a.lineTo(e.x, e.y + e.length), a.stroke(), e.y += e.speed, e.y > t.height && (e.y = -e.length, r.push({\n          x: e.x,\n          y: t.height,\n          radius: 3 * Math.random() + 1,\n          opacity: 1\n        }));\n      }), r.forEach(function (t, e) {\n        a.beginPath(), a.arc(t.x, t.y, t.radius, 0, 2 * Math.PI), a.fillStyle = \"rgba(174, 194, 224, \".concat(t.opacity, \")\"), a.fill(), t.radius += .1, t.opacity -= .03, t.opacity <= 0 && r.splice(e, 1);\n      });\n    };\n  },\n  R = function (t, a) {\n    for (var e = [], r = [\"🍔\", \"🍕\", \"🌭\", \"🍟\", \"🌮\", \"🍣\", \"🍩\", \"🍦\", \"🍎\", \"🍇\", \"🍓\", \"🍑\", \"🍍\", \"🥑\", \"🥕\", \"🥪\", \"🥨\", \"🧀\", \"🥐\", \"🥯\", \"🍱\", \"🍜\", \"🍙\", \"🍗\", \"🥟\", \"🥘\", \"🍤\", \"🥞\", \"🧇\", \"🥓\"], i = [{\n        r: 255,\n        g: 102,\n        b: 102\n      }, {\n        r: 255,\n        g: 178,\n        b: 102\n      }, {\n        r: 255,\n        g: 255,\n        b: 153\n      }, {\n        r: 153,\n        g: 255,\n        b: 153\n      }, {\n        r: 153,\n        g: 204,\n        b: 255\n      }, {\n        r: 178,\n        g: 102,\n        b: 255\n      }, {\n        r: 255,\n        g: 153,\n        b: 255\n      }], o = 0, n = 1, h = 0, l = 0; l < 50; l++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height - t.height,\n      emoji: r[Math.floor(Math.random() * r.length)],\n      size: 20 * Math.random() + 30,\n      speed: 1.5 * Math.random() + .5,\n      rotation: Math.random() * Math.PI * 2,\n      rotationSpeed: .02 * (2 * Math.random() - 1)\n    });\n    return function () {\n      (h += .005) >= 1 && (h = 0, o = n, n = (n + 1) % i.length);\n      var r,\n        l,\n        d,\n        c = (r = i[o], l = i[n], d = h, {\n          r: Math.round(r.r + (l.r - r.r) * d),\n          g: Math.round(r.g + (l.g - r.g) * d),\n          b: Math.round(r.b + (l.b - r.b) * d)\n        }),\n        f = a.createLinearGradient(0, 0, t.width, t.height);\n      f.addColorStop(0, \"rgb(\".concat(c.r, \", \").concat(c.g, \", \").concat(c.b, \")\")), f.addColorStop(1, \"rgb(\".concat(255 - c.r, \", \").concat(255 - c.g, \", \").concat(255 - c.b, \")\")), a.filter = \"blur(5px)\", a.fillStyle = f, a.fillRect(0, 0, t.width, t.height), a.filter = \"none\", e.forEach(function (e) {\n        a.save(), a.translate(e.x, e.y), a.rotate(e.rotation), a.font = \"\".concat(e.size, \"px Arial\"), a.textAlign = \"center\", a.textBaseline = \"middle\", a.strokeStyle = \"white\", a.lineWidth = 3, a.strokeText(e.emoji, 0, 0), a.fillStyle = \"black\", a.fillText(e.emoji, 0, 0), a.restore(), e.y += e.speed, e.rotation += e.rotationSpeed, e.y > t.height + e.size && (e.y = -e.size, e.x = Math.random() * t.width);\n      });\n    };\n  },\n  k = function (t, a) {\n    for (var e = [], r = [], i = [], o = 0; o < 20; o++) e.push({\n      x: Math.random() * t.width,\n      height: 200 * Math.random() + 100,\n      width: 20 * Math.random() + 10\n    });\n    for (var n = 0; n < 50; n++) r.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      radius: 2 * Math.random() + 1,\n      speed: .5 * Math.random() + .1,\n      opacity: Math.random()\n    });\n    for (var h = 0; h < 100; h++) i.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      radius: 50 * Math.random() + 20,\n      speed: .2 * Math.random() + .1\n    });\n    return function () {\n      a.fillStyle = \"#0a0a0a\", a.fillRect(0, 0, t.width, t.height), a.fillStyle = \"#1a1a1a\", e.forEach(function (e) {\n        a.beginPath(), a.moveTo(e.x, t.height), a.lineTo(e.x - e.width / 2, t.height - e.height), a.lineTo(e.x + e.width / 2, t.height - e.height), a.closePath(), a.fill();\n      }), a.fillStyle = \"rgba(200, 200, 200, 0.05)\", i.forEach(function (e) {\n        a.beginPath(), a.arc(e.x, e.y, e.radius, 0, 2 * Math.PI), a.fill(), e.x += e.speed, e.x > t.width + e.radius && (e.x = -e.radius);\n      }), r.forEach(function (e) {\n        a.beginPath(), a.arc(e.x, e.y, e.radius, 0, 2 * Math.PI), a.fillStyle = \"rgba(255, 255, 100, \".concat(e.opacity, \")\"), a.fill(), e.x += Math.sin(.001 * Date.now()) * e.speed, e.y += Math.cos(.001 * Date.now()) * e.speed, e.opacity = .5 * Math.sin(.01 * Date.now()) + .5, e.x < 0 && (e.x = t.width), e.x > t.width && (e.x = 0), e.y < 0 && (e.y = t.height), e.y > t.height && (e.y = 0);\n      });\n    };\n  },\n  j = function (t, a) {\n    for (var e = [], r = 0; r < 5; r++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      size: 50 * Math.random() + 30,\n      speed: .5 * Math.random() + .1,\n      opacity: .5 * Math.random()\n    });\n    return function () {\n      a.fillStyle = \"#000033\", a.fillRect(0, 0, t.width, t.height), e.forEach(function (e) {\n        a.beginPath(), a.moveTo(e.x, e.y), a.bezierCurveTo(e.x - e.size / 2, e.y - e.size / 2, e.x - e.size / 2, e.y + e.size / 2, e.x, e.y + e.size), a.bezierCurveTo(e.x + e.size / 2, e.y + e.size / 2, e.x + e.size / 2, e.y - e.size / 2, e.x, e.y);\n        var r = a.createRadialGradient(e.x, e.y, 0, e.x, e.y, e.size);\n        r.addColorStop(0, \"rgba(255, 255, 255, \".concat(e.opacity, \")\")), r.addColorStop(1, \"rgba(255, 255, 255, 0)\"), a.fillStyle = r, a.fill(), e.y -= e.speed, e.opacity = .2 * Math.sin(.001 * Date.now()) + .3, e.y + e.size < 0 && (e.y = t.height + e.size, e.x = Math.random() * t.width);\n      });\n    };\n  },\n  O = function (t, a) {\n    for (var e = [], r = 0; r < 20; r++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      size: 100 * Math.random() + 50,\n      rotation: Math.random() * Math.PI * 2\n    });\n    return function () {\n      a.clearRect(0, 0, t.width, t.height), e.forEach(function (t) {\n        !function (t, e, r, i) {\n          a.save(), a.translate(t, e), a.rotate(i), a.beginPath();\n          for (var o = 0; o < 8; o++) {\n            var n = 2 * Math.PI / 8 * o;\n            a.moveTo(0, 0), a.lineTo(Math.cos(n) * r, Math.sin(n) * r);\n          }\n          for (var h = r / 4; h < r; h += r / 4) {\n            a.moveTo(h, 0);\n            for (var l = 1; l < 8; l++) {\n              var d = 2 * Math.PI / 8 * l;\n              a.lineTo(Math.cos(d) * h, Math.sin(d) * h);\n            }\n            a.closePath();\n          }\n          a.strokeStyle = \"rgba(255, 255, 255, 0.1)\", a.stroke(), a.restore();\n        }(t.x, t.y, t.size, t.rotation);\n      });\n    };\n  },\n  G = function (t, a) {\n    for (var e = [], r = [], i = [], o = 0; o < 15; o++) e.push({\n      x: Math.random() * t.width,\n      y: t.height - 100 * Math.random() - 50,\n      width: 30 * Math.random() + 20,\n      height: 40 * Math.random() + 30\n    });\n    for (var n = 0; n < 10; n++) r.push({\n      x: Math.random() * t.width,\n      y: t.height,\n      speed: .5 * Math.random() + .1,\n      size: 30 * Math.random() + 20\n    });\n    for (var h = 0; h < 50; h++) i.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      radius: 100 * Math.random() + 50,\n      speed: .2 * Math.random() + .1\n    });\n    return function () {\n      var o = a.createLinearGradient(0, 0, 0, t.height);\n      o.addColorStop(0, \"#0a0a1a\"), o.addColorStop(1, \"#1a0a1a\"), a.fillStyle = o, a.fillRect(0, 0, t.width, t.height), a.beginPath(), a.arc(.8 * t.width, .2 * t.height, 40, 0, 2 * Math.PI), a.fillStyle = \"rgba(255, 255, 200, 0.8)\", a.fill(), a.fillStyle = \"#333\", e.forEach(function (t) {\n        a.fillRect(t.x, t.y, t.width, t.height), a.fillStyle = \"#222\", a.fillRect(t.x + .1 * t.width, t.y, .8 * t.width, .1 * t.height);\n      }), r.forEach(function (e) {\n        a.beginPath(), a.arc(e.x, e.y - e.size, .5 * e.size, 0, 2 * Math.PI), a.fillStyle = \"#3a5\", a.fill(), a.beginPath(), a.moveTo(e.x, e.y - e.size), a.lineTo(e.x - .5 * e.size, e.y), a.lineTo(e.x + .5 * e.size, e.y), a.closePath(), a.fillStyle = \"#3a5\", a.fill(), e.y -= e.speed, e.y < .7 * t.height && (e.y = t.height, e.x = Math.random() * t.width);\n      }), a.fillStyle = \"rgba(255, 255, 255, 0.05)\", i.forEach(function (e) {\n        a.beginPath(), a.arc(e.x, e.y, e.radius, 0, 2 * Math.PI), a.fill(), e.x += e.speed, e.x > t.width + e.radius && (e.x = -e.radius);\n      });\n    };\n  },\n  A = function (t, a) {\n    for (var e = [], r = [], i = 0; i < 200; i++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      length: 20 * Math.random() + 10,\n      speed: 5 * Math.random() + 5\n    });\n    return function () {\n      a.fillStyle = \"rgba(20, 0, 0, 0.1)\", a.fillRect(0, 0, t.width, t.height), a.strokeStyle = \"#800\", a.lineWidth = 1, e.forEach(function (e) {\n        a.beginPath(), a.moveTo(e.x, e.y), a.lineTo(e.x, e.y + e.length), a.stroke(), e.y += e.speed, e.y > t.height && (e.y = 0, e.x = Math.random() * t.width, r.push({\n          x: e.x,\n          y: t.height,\n          size: 5 * Math.random() + 2,\n          opacity: 1\n        }));\n      }), r.forEach(function (t, e) {\n        a.beginPath(), a.arc(t.x, t.y, t.size, 0, 2 * Math.PI), a.fillStyle = \"rgba(128, 0, 0, \".concat(t.opacity, \")\"), a.fill(), t.opacity -= .005, t.opacity <= 0 && r.splice(e, 1);\n      });\n    };\n  },\n  W = function (t, a) {\n    for (var e = [], r = [], i = 0; i < 50; i++) e.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height,\n      size: 5 * Math.random() + 2,\n      speedX: 2 * Math.random() - 1,\n      speedY: 2 * Math.random() - 1\n    });\n    for (var o = 0; o < 20; o++) r.push({\n      x: Math.random() * t.width,\n      y: Math.random() * t.height\n    });\n    return function () {\n      a.fillStyle = \"rgba(0, 0, 0, 0.1)\", a.fillRect(0, 0, t.width, t.height), a.strokeStyle = \"rgba(255, 255, 255, 0.1)\", a.beginPath(), r.forEach(function (t, e) {\n        r.slice(e + 1).forEach(function (e) {\n          a.moveTo(t.x, t.y), a.lineTo(e.x, e.y);\n        });\n      }), a.stroke(), a.fillStyle = \"#400\", e.forEach(function (e) {\n        a.beginPath(), a.arc(e.x, e.y, e.size, 0, 2 * Math.PI), a.fill(), e.x += e.speedX, e.y += e.speedY, (e.x < 0 || e.x > t.width) && (e.speedX *= -1), (e.y < 0 || e.y > t.height) && (e.speedY *= -1), Math.random() < .01 && (e.speedX = 2 * Math.random() - 1, e.speedY = 2 * Math.random() - 1);\n      });\n    };\n  },\n  L = function (i) {\n    var o = i.animationName,\n      n = i.fallbackAnimation,\n      l = void 0 === n ? \"geometricShapes\" : n,\n      L = i.fps,\n      D = void 0 === L ? 60 : L,\n      X = i.style,\n      Y = a(null),\n      q = a(null),\n      B = e(function () {\n        var t = Y.current,\n          a = t.getContext(\"2d\");\n        t.width = window.innerWidth, t.height = window.innerHeight;\n        var e = {\n            starryNight: d,\n            floatingBubbles: c,\n            gradientWave: f,\n            particleNetwork: s,\n            galaxySpiral: g,\n            rainbowWaves: y,\n            geometricShapes: v,\n            fireflies: b,\n            matrixRain: w,\n            quantumField: x,\n            electricStorm: p,\n            cosmicDust: m,\n            neonPulse: M,\n            auroraBorealis: u,\n            oceanWaves: z,\n            neuralNetwork: P,\n            dnaHelix: S,\n            snowFall: I,\n            realisticRain: C,\n            realisticClouds: T,\n            fireflyForest: E,\n            autumnLeaves: F,\n            fallingFoodFiesta: R,\n            hauntedForest: k,\n            ghostlyApparitions: j,\n            spiderwebOverlay: O,\n            undeadGraveyard: G,\n            bloodRain: A,\n            creepyCrawlies: W\n          },\n          r = e[o];\n        return r || (console.warn('Animation \"'.concat(o, '\" not found. Using fallback animation.')), r = e[l] || e.geometricShapes), r(t, a);\n      }, [o, l]);\n    return r(function () {\n      var t, a, e;\n      t = B(), a = 0, e = 1e3 / D, q.current = requestAnimationFrame(function r(i) {\n        q.current = requestAnimationFrame(r);\n        var o = i - a;\n        o >= e && (a = i - o % e, t());\n      });\n      var r = function () {\n        Y.current && (Y.current.width = window.innerWidth, Y.current.height = window.innerHeight, B());\n      };\n      return window.addEventListener(\"resize\", r), function () {\n        q.current && cancelAnimationFrame(q.current), window.removeEventListener(\"resize\", r);\n      };\n    }, [D, B]), t.createElement(\"canvas\", {\n      ref: Y,\n      style: h({\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        zIndex: -1\n      }, X)\n    });\n  };\nexport { L as AnimatedBackground, u as auroraBorealis, A as bloodRain, m as cosmicDust, W as creepyCrawlies, p as electricStorm, R as fallingFoodFiesta, b as fireflies, c as floatingBubbles, g as galaxySpiral, v as geometricShapes, j as ghostlyApparitions, f as gradientWave, k as hauntedForest, w as matrixRain, M as neonPulse, s as particleNetwork, x as quantumField, y as rainbowWaves, O as spiderwebOverlay, d as starryNight, G as undeadGraveyard };","map":{"version":3,"mappings":"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","names":["starryNight","canvas","ctx","stars","i","push","x","Math","random","width","y","height","radius","vx","floor","vy","twinkle","fillStyle","fillRect","forEach","star","opacity","abs","sin","beginPath","arc","PI","fill","floatingBubbles","bubbles","speed","color","bubble","strokeStyle","stroke","gradientWave","time","gradient","createLinearGradient","addColorStop","concat","moveTo","lineTo","lineWidth","particleNetwork","particles","particle","length","j","dx","dy","distance","sqrt","galaxySpiral","arguments","starCount","angle","cos","initializeStars","rotation","save","translate","rotate","drawStars","restore","rainbowWaves","colors","auroraBorealis","colorStops","pos","stop","closePath","_loop","neonPulse","circles","phase","glow","circle","createRadialGradient","cosmicDust","size","speedX","speedY","electricStorm","bolts","points","life","createBolt","bolt","index","splice","quantumField","hue","otherParticle","geometricShapes","shapes","type","clearRect","shape","fireflies","brightness","firefly","max","min","matrixRain","columns","drops","characters","font","text","fillText","dnaHelix","t","r","neuralNetwork","nodes","connections","backgroundGradient","node","_ref2","oceanWaves","skyGradient","sun","clouds","sunGradient","cloud","snowFall","snowflakes","moon","mountains","moonGradient","mountain","point","flake","fireflyForest","trees","angleSpeed","glowIntensity","tree","fly","Date","now","realisticClouds","gradientHeight","createCloud","particleCount","createSkyGradient","sunRadius","autumnLeaves","loadedCount","leaves","leafColors","leafImages","leafImagesLoaded","imagesLoaded","src","img","Image","onload","onerror","amplitude","imageIndex","leaf","drawImage","ellipse","drawLeaf","realisticRain","raindrops","splashes","drop","splash","fallingFoodFiesta","foodItems","foodTypes","g","b","colorIndex","nextColorIndex","colorT","emoji","rotationSpeed","color1","color2","currentColor","round","filter","item","textAlign","textBaseline","strokeText","hauntedForest","fog","ghostlyApparitions","ghosts","ghost","bezierCurveTo","spiderwebOverlay","webs","web","drawWeb","undeadGraveyard","graves","zombies","grave","zombie","bloodRain","splats","splat","creepyCrawlies","bugs","webNodes","slice","otherNode","bug","AnimatedBackground","_ref","animationName","_ref$fallbackAnimatio","fallbackAnimation","_ref$fps","fps","style","canvasRef","useRef","animationRef","setupCanvas","useCallback","current","getContext","window","innerWidth","innerHeight","animations","animation","console","warn","useEffect","lastTime","frameInterval","requestAnimationFrame","loop","currentTime","deltaTime","handleResize","addEventListener","cancelAnimationFrame","removeEventListener","React","ref","_objectSpread","position","top","left","zIndex"],"sources":["C:\\Users\\julio\\Downloads\\todolist-app-react-js-main\\node_modules\\animated-backgrounds\\src\\backgroundAnimations.js","C:\\Users\\julio\\Downloads\\todolist-app-react-js-main\\node_modules\\animated-backgrounds\\src\\index.js"],"sourcesContent":["// src/backgroundAnimations.js\r\n\r\nexport const starryNight = (canvas, ctx) => {\r\n    const stars = [];\r\n    for (let i = 0; i < 150; i++) {\r\n        stars.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2,\r\n            vx: Math.floor(Math.random() * 50) - 25,\r\n            vy: Math.floor(Math.random() * 50) - 25,\r\n            twinkle: Math.random()\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(15, 23, 42, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        ctx.fillStyle = '#FFF';\r\n        stars.forEach(star => {\r\n            star.twinkle += 0.02;\r\n            const opacity = Math.abs(Math.sin(star.twinkle));\r\n            ctx.beginPath();\r\n            ctx.arc(star.x, star.y, star.radius, 0, 2 * Math.PI);\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;\r\n            ctx.fill();\r\n\r\n            star.x += star.vx / 60;\r\n            star.y += star.vy / 60;\r\n\r\n            if (star.x < 0 || star.x > canvas.width) star.vx = -star.vx;\r\n            if (star.y < 0 || star.y > canvas.height) star.vy = -star.vy;\r\n        });\r\n    };\r\n};\r\n\r\nexport const floatingBubbles = (canvas, ctx) => {\r\n    const bubbles = [];\r\n    for (let i = 0; i < 75; i++) {\r\n        bubbles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 30 + 5,\r\n            speed: Math.random() * 0.7 + 0.1,\r\n            color: `hsla(${Math.random() * 360}, 70%, 60%, 0.6)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(30, 41, 59, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        bubbles.forEach(bubble => {\r\n            ctx.beginPath();\r\n            ctx.arc(bubble.x, bubble.y, bubble.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = bubble.color;\r\n            ctx.fill();\r\n            ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\r\n            ctx.stroke();\r\n\r\n            bubble.y -= bubble.speed;\r\n            bubble.x += Math.sin(bubble.y * 0.03) * 0.5;\r\n            if (bubble.y + bubble.radius < 0) {\r\n                bubble.y = canvas.height + bubble.radius;\r\n                bubble.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const gradientWave = (canvas, ctx) => {\r\n    let time = 0;\r\n\r\n    return () => {\r\n        time += 0.01;\r\n\r\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n        gradient.addColorStop(0, `hsl(${time * 10 % 360}, 70%, 50%)`);\r\n        gradient.addColorStop(1, `hsl(${(time * 10 + 180) % 360}, 70%, 50%)`);\r\n\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height * 0.15 * i + Math.sin(time + i) * 30);\r\n            for (let x = 0; x < canvas.width; x += 10) {\r\n                ctx.lineTo(x, canvas.height * 0.15 * i + Math.sin(time + i + x * 0.01) * 30);\r\n            }\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${0.1 - i * 0.01})`;\r\n            ctx.lineWidth = 2;\r\n            ctx.stroke();\r\n        }\r\n    };\r\n};\r\n\r\nexport const particleNetwork = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 150;\r\n    const maxDistance = 120;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 3 + 1,\r\n            vx: Math.random() * 1.5 - 0.75,\r\n            vy: Math.random() * 1.5 - 0.75,\r\n            color: `hsl(${Math.random() * 360}, 70%, 70%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(15, 23, 42, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            particle.x += particle.vx;\r\n            particle.y += particle.vy;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = particle.color;\r\n            ctx.fill();\r\n        });\r\n\r\n        for (let i = 0; i < particles.length; i++) {\r\n            for (let j = i + 1; j < particles.length; j++) {\r\n                const dx = particles[i].x - particles[j].x;\r\n                const dy = particles[i].y - particles[j].y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (distance < maxDistance) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(particles[i].x, particles[i].y);\r\n                    ctx.lineTo(particles[j].x, particles[j].y);\r\n                    ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance / maxDistance})`;\r\n                    ctx.lineWidth = 0.5;\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n    };\r\n};\r\nexport const galaxySpiral = (canvas, ctx, speed = 0.0001) => {\r\n    const stars = initializeStars(canvas, 2000);\r\n    let rotation = 0;\r\n\r\n    function initializeStars(canvas, starCount) {\r\n        const stars = [];\r\n        for (let i = 0; i < starCount; i++) {\r\n            const distance = Math.random() * canvas.width * 0.4;\r\n            const angle = Math.random() * Math.PI * 2;\r\n            stars.push({\r\n                x: Math.cos(angle) * distance,\r\n                y: Math.sin(angle) * distance,\r\n                radius: Math.random() * 1.5 + 0.5,\r\n                color: `hsl(${Math.random() * 60 + 200}, 80%, 70%)`,\r\n                angle: angle,\r\n                distance: distance\r\n            });\r\n        }\r\n        return stars;\r\n    }\r\n\r\n    function drawStars(ctx, stars, rotation, speed) {\r\n        stars.forEach(star => {\r\n            const x = Math.cos(star.angle) * star.distance;\r\n            const y = Math.sin(star.angle) * star.distance;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, star.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = star.color;\r\n            ctx.fill();\r\n\r\n            // Adjust the angle increment here to control the speed of star rotation\r\n            star.angle += speed / (star.distance * 0.00008);\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(10, 10, 30, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.save();\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n        ctx.rotate(rotation);\r\n\r\n        drawStars(ctx, stars, rotation, speed);\r\n\r\n        ctx.restore();\r\n        // Adjust the rotation increment here to control the speed of galaxy rotation\r\n        rotation += speed;\r\n    };\r\n};\r\nexport const rainbowWaves = (canvas, ctx) => {\r\n    let time = 0;\r\n    const waves = 7;\r\n    const colors = ['#FF0000', '#FF7F00', '#FFFF00', '#00FF00', '#0000FF', '#4B0082', '#8B00FF'];\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        time += 0.02;\r\n\r\n        for (let i = 0; i < waves; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height / 2);\r\n\r\n            for (let x = 0; x < canvas.width; x++) {\r\n                const y = Math.sin(x * 0.01 + time + i * 0.5) * 50 +\r\n                    Math.cos(x * 0.02 + time * 0.7 + i * 0.3) * 25 +\r\n                    canvas.height / 2;\r\n                ctx.lineTo(x, y);\r\n            }\r\n\r\n            ctx.strokeStyle = colors[i % colors.length];\r\n            ctx.lineWidth = 4;\r\n            ctx.stroke();\r\n        }\r\n    };\r\n};\r\nexport const auroraBorealis = (canvas, ctx) => {\r\n    let time = 0;\r\n    const colorStops = [\r\n        { pos: 0, color: 'rgba(0, 255, 128, 0.5)' },\r\n        { pos: 0.5, color: 'rgba(0, 128, 255, 0.5)' },\r\n        { pos: 1, color: 'rgba(128, 0, 255, 0.5)' }\r\n    ];\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        time += 0.005;\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\r\n            colorStops.forEach(stop => {\r\n                gradient.addColorStop(stop.pos, stop.color);\r\n            });\r\n\r\n            ctx.beginPath();\r\n            for (let x = 0; x < canvas.width; x++) {\r\n                const y = Math.sin(x * 0.01 + time + i) * 50 +\r\n                    Math.sin(x * 0.02 - time * 1.5 + i) * 30 +\r\n                    canvas.height * (0.4 + i * 0.2);\r\n                ctx.lineTo(x, y);\r\n            }\r\n            ctx.lineTo(canvas.width, canvas.height);\r\n            ctx.lineTo(0, canvas.height);\r\n            ctx.closePath();\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        }\r\n    };\r\n};\r\nexport const neonPulse = (canvas, ctx) => {\r\n    const circles = [];\r\n    const colors = ['#FF00FF', '#00FFFF', '#FFFF00', '#FF00AA'];\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n        circles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 50 + 20,\r\n            color: colors[Math.floor(Math.random() * colors.length)],\r\n            phase: Math.random() * Math.PI * 2\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        circles.forEach(circle => {\r\n            const glow = Math.sin(circle.phase) * 20 + 30;\r\n            const gradient = ctx.createRadialGradient(\r\n                circle.x, circle.y, 0,\r\n                circle.x, circle.y, circle.radius\r\n            );\r\n            gradient.addColorStop(0, circle.color);\r\n            gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(circle.x, circle.y, circle.radius + glow, 0, Math.PI * 2);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n\r\n            circle.phase += 0.05;\r\n        });\r\n    };\r\n};\r\nexport const cosmicDust = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 300;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 2 + 0.5,\r\n            speedX: (Math.random() - 0.5) * 0.5,\r\n            speedY: (Math.random() - 0.5) * 0.5,\r\n            color: `hsl(${Math.random() * 60 + 180}, 100%, 70%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = particle.color;\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speedX;\r\n            particle.y += particle.speedY;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\r\n        });\r\n    };\r\n};\r\nexport const electricStorm = (canvas, ctx) => {\r\n    let time = 0;\r\n    const bolts = [];\r\n\r\n    function createBolt() {\r\n        const startX = Math.random() * canvas.width;\r\n        let x = startX;\r\n        let y = 0;\r\n        const points = [{ x, y }];\r\n\r\n        while (y < canvas.height) {\r\n            x += (Math.random() - 0.5) * 50;\r\n            y += Math.random() * 20 + 10;\r\n            points.push({ x, y });\r\n        }\r\n\r\n        return {\r\n            points,\r\n            life: 5 + Math.random() * 5,\r\n            width: Math.random() * 3 + 1\r\n        };\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.2)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        time += 0.1;\r\n        if (Math.random() < 0.1) bolts.push(createBolt());\r\n\r\n        bolts.forEach((bolt, index) => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(bolt.points[0].x, bolt.points[0].y);\r\n            for (let i = 1; i < bolt.points.length; i++) {\r\n                ctx.lineTo(bolt.points[i].x, bolt.points[i].y);\r\n            }\r\n            ctx.strokeStyle = `rgba(180, 220, 255, ${bolt.life / 10})`;\r\n            ctx.lineWidth = bolt.width;\r\n            ctx.stroke();\r\n\r\n            bolt.life -= 0.2;\r\n            if (bolt.life <= 0) bolts.splice(index, 1);\r\n        });\r\n    };\r\n};\r\n\r\nexport const quantumField = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 100;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 4 + 1,\r\n            speedX: (Math.random() - 0.5) * 2,\r\n            speedY: (Math.random() - 0.5) * 2,\r\n            hue: Math.random() * 360\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            particle.x += particle.speedX;\r\n            particle.y += particle.speedY;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `hsla(${particle.hue}, 100%, 50%, 0.8)`;\r\n            ctx.fill();\r\n\r\n            particles.forEach(otherParticle => {\r\n                const dx = particle.x - otherParticle.x;\r\n                const dy = particle.y - otherParticle.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (distance < 100) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(particle.x, particle.y);\r\n                    ctx.lineTo(otherParticle.x, otherParticle.y);\r\n                    ctx.strokeStyle = `hsla(${(particle.hue + otherParticle.hue) / 2}, 100%, 50%, ${1 - distance / 100})`;\r\n                    ctx.stroke();\r\n                }\r\n            });\r\n\r\n            particle.hue = (particle.hue + 0.5) % 360;\r\n        });\r\n    };\r\n};\r\n\r\nexport const geometricShapes = (canvas, ctx) => {\r\n    const shapes = [];\r\n    const shapeCount = 50;\r\n\r\n    for (let i = 0; i < shapeCount; i++) {\r\n        shapes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 30 + 10,\r\n            type: Math.floor(Math.random() * 3),\r\n            rotation: Math.random() * Math.PI * 2,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            color: `hsl(${Math.random() * 360}, 70%, 50%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        shapes.forEach(shape => {\r\n            ctx.save();\r\n            ctx.translate(shape.x, shape.y);\r\n            ctx.rotate(shape.rotation);\r\n            ctx.fillStyle = shape.color;\r\n\r\n            switch (shape.type) {\r\n                case 0: // Square\r\n                    ctx.fillRect(-shape.size / 2, -shape.size / 2, shape.size, shape.size);\r\n                    break;\r\n                case 1: // Circle\r\n                    ctx.beginPath();\r\n                    ctx.arc(0, 0, shape.size / 2, 0, Math.PI * 2);\r\n                    ctx.fill();\r\n                    break;\r\n                case 2: // Triangle\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(0, -shape.size / 2);\r\n                    ctx.lineTo(shape.size / 2, shape.size / 2);\r\n                    ctx.lineTo(-shape.size / 2, shape.size / 2);\r\n                    ctx.closePath();\r\n                    ctx.fill();\r\n                    break;\r\n            }\r\n\r\n            ctx.restore();\r\n\r\n            shape.rotation += shape.speed * 0.05;\r\n            shape.y += shape.speed;\r\n            if (shape.y > canvas.height + shape.size) {\r\n                shape.y = -shape.size;\r\n                shape.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const fireflies = (canvas, ctx) => {\r\n    const fireflies = [];\r\n    const fireflyCount = 100;\r\n\r\n    for (let i = 0; i < fireflyCount; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 3 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            brightness: Math.random(),\r\n            angle: Math.random() * Math.PI * 2\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        fireflies.forEach(firefly => {\r\n            firefly.brightness += Math.random() * 0.1 - 0.05;\r\n            firefly.brightness = Math.max(0, Math.min(1, firefly.brightness));\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(firefly.x, firefly.y, firefly.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${firefly.brightness})`;\r\n            ctx.fill();\r\n\r\n            firefly.x += Math.cos(firefly.angle) * firefly.speed;\r\n            firefly.y += Math.sin(firefly.angle) * firefly.speed;\r\n\r\n            if (firefly.x < 0 || firefly.x > canvas.width || firefly.y < 0 || firefly.y > canvas.height) {\r\n                firefly.angle += Math.PI;\r\n            }\r\n\r\n            if (Math.random() < 0.01) {\r\n                firefly.angle = Math.random() * Math.PI * 2;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const matrixRain = (canvas, ctx) => {\r\n    const columns = Math.floor(canvas.width / 20);\r\n    const drops = [];\r\n\r\n    for (let i = 0; i < columns; i++) {\r\n        drops[i] = Math.random() * canvas.height;\r\n    }\r\n\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+[]{}|;:,.<>?';\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.fillStyle = '#0F0';\r\n        ctx.font = '15px monospace';\r\n\r\n        for (let i = 0; i < drops.length; i++) {\r\n            const text = characters[Math.floor(Math.random() * characters.length)];\r\n            ctx.fillText(text, i * 20, drops[i] * 20);\r\n\r\n            if (drops[i] * 20 > canvas.height && Math.random() > 0.975) {\r\n                drops[i] = 0;\r\n            }\r\n            drops[i] += 0.6;\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const dnaHelix = (canvas, ctx) => {\r\n    const speed = 0.02\r\n    const baseRadius = 100\r\n    const amplitude = 50\r\n    const nucleotideSize = 5\r\n    let t = 0;\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.save();\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            ctx.beginPath();\r\n            for (let x = -canvas.width / 2; x < canvas.width / 2; x += 10) {\r\n                const y = Math.sin(x * 0.01 + t + i * Math.PI) * amplitude;\r\n                const r = baseRadius + y;\r\n                ctx.lineTo(x, r);\r\n            }\r\n            ctx.strokeStyle = i === 0 ? 'rgba(255, 0, 0, 0.5)' : 'rgba(0, 0, 255, 0.5)';\r\n            ctx.lineWidth = 2;\r\n            ctx.stroke();\r\n\r\n            // Draw nucleotides\r\n            for (let x = -canvas.width / 2; x < canvas.width / 2; x += 40) {\r\n                const y = Math.sin(x * 0.01 + t + i * Math.PI) * amplitude;\r\n                const r = baseRadius + y;\r\n                ctx.fillStyle = i === 0 ? 'rgba(255, 255, 0, 0.8)' : 'rgba(0, 255, 0, 0.8)';\r\n                ctx.beginPath();\r\n                ctx.arc(x, r, nucleotideSize, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n        }\r\n\r\n        ctx.restore();\r\n        t += speed;\r\n    };\r\n}\r\n\r\nexport const neuralNetwork = (canvas, ctx) => {\r\n    const nodeCount = 30;\r\n    const connectionProbability = 0.2;\r\n    const speed = 0.3;\r\n    const nodes = [];\r\n    const connections = [];\r\n\r\n    // Create background gradient\r\n    const backgroundGradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n    backgroundGradient.addColorStop(0, '#000000');\r\n    backgroundGradient.addColorStop(1, '#1a1a2e');\r\n\r\n    for (let i = 0; i < nodeCount; i++) {\r\n        nodes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            vx: (Math.random() - 0.5) * speed,\r\n            vy: (Math.random() - 0.5) * speed,\r\n            size: Math.random() * 2 + 2\r\n        });\r\n    }\r\n\r\n    // Pre-compute connections\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        for (let j = i + 1; j < nodes.length; j++) {\r\n            if (Math.random() < connectionProbability) {\r\n                connections.push([i, j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return () => {\r\n        // Draw background\r\n        ctx.fillStyle = backgroundGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Update and draw nodes\r\n        nodes.forEach((node, index) => {\r\n            node.x += node.vx;\r\n            node.y += node.vy;\r\n\r\n            if (node.x < 0 || node.x > canvas.width) node.vx *= -1;\r\n            if (node.y < 0 || node.y > canvas.height) node.vy *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(node.x, node.y, node.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `hsl(${index * (360 / nodeCount)}, 100%, 50%)`;\r\n            ctx.fill();\r\n\r\n            // Add glow effect\r\n            ctx.beginPath();\r\n            ctx.arc(node.x, node.y, node.size + 3, 0, Math.PI * 2);\r\n            const gradient = ctx.createRadialGradient(node.x, node.y, node.size, node.x, node.y, node.size + 3);\r\n            gradient.addColorStop(0, `hsla(${index * (360 / nodeCount)}, 100%, 50%, 0.8)`);\r\n            gradient.addColorStop(1, `hsla(${index * (360 / nodeCount)}, 100%, 50%, 0)`);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw connections\r\n        connections.forEach(([i, j]) => {\r\n            const dx = nodes[i].x - nodes[j].x;\r\n            const dy = nodes[i].y - nodes[j].y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            const opacity = 1 - distance / Math.max(canvas.width, canvas.height);\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(nodes[i].x, nodes[i].y);\r\n            ctx.lineTo(nodes[j].x, nodes[j].y);\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${opacity * 0.2})`;\r\n            ctx.stroke();\r\n        });\r\n\r\n        // Add subtle particle effect\r\n        for (let i = 0; i < 5; i++) {\r\n            ctx.beginPath();\r\n            ctx.arc(Math.random() * canvas.width, Math.random() * canvas.height, Math.random() * 1.5, 0, Math.PI * 2);\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n            ctx.fill();\r\n        }\r\n    };\r\n}\r\n\r\nexport const oceanWaves = (canvas, ctx) => {\r\n    const waveCount = 7;\r\n    const amplitude = 30;\r\n    const frequency = 0.02;\r\n    const speed = 0.03;\r\n    let time = 0;\r\n\r\n    // Create sky gradient\r\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, canvas.height * 0.6);\r\n    skyGradient.addColorStop(0, '#87CEEB');\r\n    skyGradient.addColorStop(1, '#E0F6FF');\r\n\r\n    // Create sun\r\n    const sun = {\r\n        x: canvas.width * 0.8,\r\n        y: canvas.height * 0.2,\r\n        radius: 40,\r\n        glow: 20\r\n    };\r\n\r\n    // Create clouds\r\n    const clouds = [\r\n        { x: canvas.width * 0.1, y: canvas.height * 0.15, radius: 30 },\r\n        { x: canvas.width * 0.3, y: canvas.height * 0.1, radius: 40 },\r\n        { x: canvas.width * 0.6, y: canvas.height * 0.2, radius: 35 }\r\n    ];\r\n\r\n    return () => {\r\n        // Draw sky\r\n        ctx.fillStyle = skyGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height * 0.6);\r\n\r\n        // Draw sun\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(sun.x, sun.y, sun.radius, 0, Math.PI * 2);\r\n        const sunGradient = ctx.createRadialGradient(sun.x, sun.y, sun.radius - sun.glow, sun.x, sun.y, sun.radius + sun.glow);\r\n        sunGradient.addColorStop(0, 'rgba(255, 255, 0, 1)');\r\n        sunGradient.addColorStop(0.8, 'rgba(255, 255, 0, 0.3)');\r\n        sunGradient.addColorStop(1, 'rgba(255, 255, 0, 0)');\r\n        ctx.fillStyle = sunGradient;\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n        // Draw clouds\r\n        clouds.forEach(cloud => {\r\n            ctx.beginPath();\r\n            ctx.arc(cloud.x, cloud.y, cloud.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw ocean\r\n        for (let i = 0; i < waveCount; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height);\r\n\r\n            for (let x = 0; x <= canvas.width; x += 5) {\r\n                const y = Math.sin(x * frequency + time + i * 0.5) * amplitude * (1 + i * 0.1) +\r\n                    (canvas.height - (i + 1) * (canvas.height * 0.4 / waveCount));\r\n                ctx.lineTo(x, y);\r\n            }\r\n\r\n            ctx.lineTo(canvas.width, canvas.height);\r\n            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n            gradient.addColorStop(0, `rgba(0, 100, 255, ${0.1 + (i / waveCount) * 0.15})`);\r\n            gradient.addColorStop(1, `rgba(0, 50, 200, ${0.1 + (i / waveCount) * 0.15})`);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        }\r\n\r\n        time += speed;\r\n    };\r\n}\r\nexport const snowFall = (canvas, ctx) => {\r\n    const snowflakeCount = 200;\r\n    const snowflakes = [];\r\n    const backgroundGradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n    backgroundGradient.addColorStop(0, '#0c1445');\r\n    backgroundGradient.addColorStop(1, '#1c2754');\r\n\r\n    // Create moon\r\n    const moon = {\r\n        x: canvas.width * 0.8,\r\n        y: canvas.height * 0.2,\r\n        radius: 50,\r\n        glow: 20\r\n    };\r\n\r\n    // Create mountains\r\n    const mountains = [\r\n        { points: [[0, canvas.height], [canvas.width * 0.3, canvas.height * 0.7], [canvas.width * 0.5, canvas.height]], color: '#0a1128' },\r\n        { points: [[canvas.width * 0.4, canvas.height], [canvas.width * 0.7, canvas.height * 0.75], [canvas.width, canvas.height]], color: '#0d1636' }\r\n    ];\r\n\r\n    for (let i = 0; i < snowflakeCount; i++) {\r\n        snowflakes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            vx: (Math.random() - 0.5) * 1.5,\r\n            vy: Math.random() * 1 + 0.5,\r\n            size: Math.random() * 3 + 1,\r\n            opacity: Math.random() * 0.5 + 0.5\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = backgroundGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw moon\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(moon.x, moon.y, moon.radius, 0, Math.PI * 2);\r\n        const moonGradient = ctx.createRadialGradient(moon.x, moon.y, moon.radius - moon.glow, moon.x, moon.y, moon.radius + moon.glow);\r\n        moonGradient.addColorStop(0, 'rgba(255, 255, 230, 1)');\r\n        moonGradient.addColorStop(0.5, 'rgba(255, 255, 230, 0.3)');\r\n        moonGradient.addColorStop(1, 'rgba(255, 255, 230, 0)');\r\n        ctx.fillStyle = moonGradient;\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n        // Draw mountains\r\n        mountains.forEach(mountain => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(mountain.points[0][0], mountain.points[0][1]);\r\n            mountain.points.forEach(point => ctx.lineTo(point[0], point[1]));\r\n            ctx.fillStyle = mountain.color;\r\n            ctx.fill();\r\n        });\r\n\r\n        snowflakes.forEach(flake => {\r\n            flake.x += flake.vx + Math.sin(flake.y * 0.01) * 0.3;\r\n            flake.y += flake.vy;\r\n\r\n            if (flake.y > canvas.height) {\r\n                flake.x = Math.random() * canvas.width;\r\n                flake.y = -flake.size;\r\n                flake.vx = (Math.random() - 0.5) * 1.5;\r\n                flake.vy = Math.random() * 1 + 0.5;\r\n            }\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(flake.x, flake.y, flake.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${flake.opacity})`;\r\n            ctx.fill();\r\n        });\r\n\r\n        // Add a subtle glow effect\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.03)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    };\r\n}\r\n\r\n\r\nexport const fireflyForest = (canvas, ctx) => {\r\n    const fireflies = [];\r\n    const fireflyCount = 100;\r\n    const trees = [];\r\n    const treeCount = 5;\r\n\r\n    // Create trees\r\n    for (let i = 0; i < treeCount; i++) {\r\n        trees.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height,\r\n            height: Math.random() * 200 + 300,\r\n            width: Math.random() * 100 + 50\r\n        });\r\n    }\r\n\r\n    // Create fireflies\r\n    for (let i = 0; i < fireflyCount; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            angle: Math.random() * Math.PI * 2,\r\n            angleSpeed: (Math.random() - 0.5) * 0.01,\r\n            glowIntensity: Math.random()\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        // Night sky\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw trees\r\n        trees.forEach(tree => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(tree.x, tree.y);\r\n            ctx.lineTo(tree.x - tree.width / 2, tree.y - tree.height);\r\n            ctx.lineTo(tree.x + tree.width / 2, tree.y - tree.height);\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgba(0, 50, 0, 0.8)';\r\n            ctx.fill();\r\n        });\r\n\r\n        // Update and draw fireflies\r\n        fireflies.forEach(fly => {\r\n            fly.x += Math.cos(fly.angle) * fly.speed;\r\n            fly.y += Math.sin(fly.angle) * fly.speed;\r\n            fly.angle += fly.angleSpeed;\r\n\r\n            if (fly.x < 0 || fly.x > canvas.width) fly.angle = Math.PI - fly.angle;\r\n            if (fly.y < 0 || fly.y > canvas.height) fly.angle = -fly.angle;\r\n\r\n            fly.glowIntensity = Math.sin(Date.now() * 0.002 + fly.x * 0.1) * 0.5 + 0.5;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(fly.x, fly.y, fly.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${fly.glowIntensity})`;\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(fly.x, fly.y, fly.radius * 3, 0, Math.PI * 2);\r\n            const gradient = ctx.createRadialGradient(fly.x, fly.y, 0, fly.x, fly.y, fly.radius * 3);\r\n            gradient.addColorStop(0, `rgba(255, 255, 100, ${fly.glowIntensity * 0.5})`);\r\n            gradient.addColorStop(1, 'rgba(255, 255, 100, 0)');\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        });\r\n    };\r\n};\r\nexport const realisticClouds = (canvas, ctx) => {\r\n    const clouds = [];\r\n    const cloudCount = 10;\r\n    let gradientHeight;\r\n\r\n    function createCloud(x, y) {\r\n        const particleCount = Math.floor(Math.random() * 50) + 50;\r\n        const particles = [];\r\n\r\n        for (let i = 0; i < particleCount; i++) {\r\n            particles.push({\r\n                x: x + Math.random() * 200 - 100,\r\n                y: y + Math.random() * 100 - 50,\r\n                radius: Math.random() * 30 + 10\r\n            });\r\n        }\r\n\r\n        return {\r\n            particles,\r\n            x,\r\n            y,\r\n            speed: Math.random() * 0.5 + 0.1\r\n        };\r\n    }\r\n\r\n    for (let i = 0; i < cloudCount; i++) {\r\n        clouds.push(createCloud(Math.random() * canvas.width, Math.random() * (canvas.height / 2)));\r\n    }\r\n\r\n    // Create gradient for the sky\r\n    const createSkyGradient = () => {\r\n        gradientHeight = canvas.height;\r\n        const gradient = ctx.createLinearGradient(0, 0, 0, gradientHeight);\r\n        gradient.addColorStop(0, '#1e90ff');  // Dodger Blue\r\n        gradient.addColorStop(0.5, '#87ceeb'); // Sky Blue\r\n        gradient.addColorStop(1, '#e6f3ff');  // Very Light Blue\r\n        return gradient;\r\n    }\r\n\r\n    let skyGradient = createSkyGradient();\r\n\r\n    return () => {\r\n        // Redraw sky gradient if canvas size has changed\r\n        if (gradientHeight !== canvas.height) {\r\n            skyGradient = createSkyGradient();\r\n        }\r\n\r\n        // Draw sky\r\n        ctx.fillStyle = skyGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        clouds.forEach(cloud => {\r\n            cloud.x += cloud.speed;\r\n            if (cloud.x > canvas.width + 200) {\r\n                cloud.x = -200;\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(cloud.x, cloud.y);\r\n\r\n            // Draw cloud shadow\r\n            cloud.particles.forEach(particle => {\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x + 5, particle.y + 5, particle.radius, 0, Math.PI * 2);\r\n                ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n                ctx.fill();\r\n            });\r\n\r\n            // Draw cloud\r\n            cloud.particles.forEach(particle => {\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n                const gradient = ctx.createRadialGradient(particle.x, particle.y, 0, particle.x, particle.y, particle.radius);\r\n                gradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');\r\n                gradient.addColorStop(1, 'rgba(255, 255, 255, 0.2)');\r\n                ctx.fillStyle = gradient;\r\n                ctx.fill();\r\n            });\r\n\r\n            ctx.restore();\r\n        });\r\n\r\n        // Optional: Add sun\r\n        const sunRadius = 40;\r\n        const sunGlow = 20;\r\n        ctx.beginPath();\r\n        ctx.arc(canvas.width - 100, 100, sunRadius, 0, Math.PI * 2);\r\n        const sunGradient = ctx.createRadialGradient(canvas.width - 100, 100, 0, canvas.width - 100, 100, sunRadius + sunGlow);\r\n        sunGradient.addColorStop(0, 'rgba(255, 255, 200, 1)');\r\n        sunGradient.addColorStop(0.8, 'rgba(255, 255, 0, 0.3)');\r\n        sunGradient.addColorStop(1, 'rgba(255, 255, 0, 0)');\r\n        ctx.fillStyle = sunGradient;\r\n        ctx.fill();\r\n    };\r\n};\r\n\r\nexport const autumnLeaves = (canvas, ctx) => {\r\n    const leaves = [];\r\n    const leafCount = 100;\r\n    const leafColors = ['#ff6b6b', '#feca57', '#ff9ff3', '#ff9f43', '#e17055'];\r\n    const leafImages = [\r\n        '1.jpg',\r\n        '2.jpg',\r\n    ];\r\n    const leafImagesLoaded = [];\r\n    let imagesLoaded = false;\r\n\r\n    // Load images\r\n    const loadImages = () => {\r\n        let loadedCount = 0;\r\n        leafImages.forEach((src, index) => {\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                leafImagesLoaded[index] = img;\r\n                loadedCount++;\r\n                if (loadedCount === leafImages.length) {\r\n                    imagesLoaded = true;\r\n                }\r\n            };\r\n            img.onerror = () => {\r\n                loadedCount++;\r\n                if (loadedCount === leafImages.length) {\r\n                    imagesLoaded = true;\r\n                }\r\n            };\r\n            img.src = src;\r\n        });\r\n    };\r\n\r\n    loadImages();\r\n\r\n    for (let i = 0; i < leafCount; i++) {\r\n        leaves.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 20 + 10,\r\n            speed: Math.random() * 2 + 1,\r\n            amplitude: Math.random() * 20 + 10,\r\n            angle: Math.random() * Math.PI * 2,\r\n            angleSpeed: (Math.random() - 0.5) * 0.05,\r\n            imageIndex: Math.floor(Math.random() * leafImages.length),\r\n            color: leafColors[Math.floor(Math.random() * leafColors.length)]\r\n        });\r\n    }\r\n\r\n    const drawLeaf = (leaf) => {\r\n        ctx.save();\r\n        ctx.translate(leaf.x, leaf.y);\r\n        ctx.rotate(leaf.angle);\r\n\r\n        if (imagesLoaded && leafImagesLoaded[leaf.imageIndex]) {\r\n            ctx.drawImage(leafImagesLoaded[leaf.imageIndex], -leaf.size / 2, -leaf.size / 2, leaf.size, leaf.size);\r\n        } else {\r\n            // Fallback: draw a colored oval if image is not available\r\n            ctx.beginPath();\r\n            ctx.ellipse(0, 0, leaf.size / 2, leaf.size / 4, 0, 0, Math.PI * 2);\r\n            ctx.fillStyle = leaf.color;\r\n            ctx.fill();\r\n        }\r\n\r\n        ctx.restore();\r\n    };\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(135, 206, 235, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        leaves.forEach(leaf => {\r\n            leaf.y += leaf.speed;\r\n            leaf.x += Math.sin(leaf.y * 0.01) * leaf.amplitude * 0.05;\r\n            leaf.angle += leaf.angleSpeed;\r\n\r\n            if (leaf.y > canvas.height) {\r\n                leaf.y = -leaf.size;\r\n                leaf.x = Math.random() * canvas.width;\r\n            }\r\n\r\n            drawLeaf(leaf);\r\n        });\r\n    };\r\n};\r\n\r\nexport const realisticRain = (canvas, ctx) => {\r\n    const raindrops = [];\r\n    const dropCount = 1000;\r\n    const splashes = [];\r\n\r\n    for (let i = 0; i < dropCount; i++) {\r\n        raindrops.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            length: Math.random() * 20 + 10,\r\n            speed: Math.random() * 10 + 15\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw and update raindrops\r\n        ctx.strokeStyle = 'rgba(174, 194, 224, 0.5)';\r\n        ctx.lineWidth = 1;\r\n        raindrops.forEach(drop => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(drop.x, drop.y);\r\n            ctx.lineTo(drop.x, drop.y + drop.length);\r\n            ctx.stroke();\r\n\r\n            drop.y += drop.speed;\r\n\r\n            if (drop.y > canvas.height) {\r\n                drop.y = -drop.length;\r\n                splashes.push({\r\n                    x: drop.x,\r\n                    y: canvas.height,\r\n                    radius: Math.random() * 3 + 1,\r\n                    opacity: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        // Draw and update splashes\r\n        splashes.forEach((splash, index) => {\r\n            ctx.beginPath();\r\n            ctx.arc(splash.x, splash.y, splash.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(174, 194, 224, ${splash.opacity})`;\r\n            ctx.fill();\r\n\r\n            splash.radius += 0.1;\r\n            splash.opacity -= 0.03;\r\n\r\n            if (splash.opacity <= 0) {\r\n                splashes.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const fallingFoodFiesta = (canvas, ctx) => {\r\n    const foodItems = [];\r\n    const foodTypes = ['🍔', '🍕', '🌭', '🍟', '🌮', '🍣', '🍩', '🍦', '🍎', '🍇', '🍓', '🍑', '🍍', '🥑', '🥕', '🥪', '🥨', '🧀', '🥐', '🥯', '🍱', '🍜', '🍙', '🍗', '🥟', '🥘', '🍤', '🥞', '🧇', '🥓'];\r\n    const numItems = 50;\r\n\r\n    // Lighter gradient colors\r\n    const colors = [\r\n        { r: 255, g: 102, b: 102 },  // Light Red\r\n        { r: 255, g: 178, b: 102 },  // Light Orange\r\n        { r: 255, g: 255, b: 153 },  // Light Yellow\r\n        { r: 153, g: 255, b: 153 },  // Light Green\r\n        { r: 153, g: 204, b: 255 },  // Light Blue\r\n        { r: 178, g: 102, b: 255 },  // Light Indigo\r\n        { r: 255, g: 153, b: 255 }   // Light Violet\r\n    ];\r\n\r\n    let colorIndex = 0;\r\n    let nextColorIndex = 1;\r\n    let colorT = 0;\r\n    const colorSpeed = 0.005;\r\n\r\n    for (let i = 0; i < numItems; i++) {\r\n        foodItems.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height - canvas.height,\r\n            emoji: foodTypes[Math.floor(Math.random() * foodTypes.length)],\r\n            size: Math.random() * 20 + 30,\r\n            speed: Math.random() * 1.5 + 0.5,\r\n            rotation: Math.random() * Math.PI * 2,\r\n            rotationSpeed: (Math.random() * 2 - 1) * 0.02\r\n        });\r\n    }\r\n\r\n    const lerpColor = (color1, color2, t) => {\r\n        return {\r\n            r: Math.round(color1.r + (color2.r - color1.r) * t),\r\n            g: Math.round(color1.g + (color2.g - color1.g) * t),\r\n            b: Math.round(color1.b + (color2.b - color1.b) * t)\r\n        };\r\n    };\r\n\r\n    return () => {\r\n        // Update gradient colors\r\n        colorT += colorSpeed;\r\n        if (colorT >= 1) {\r\n            colorT = 0;\r\n            colorIndex = nextColorIndex;\r\n            nextColorIndex = (nextColorIndex + 1) % colors.length;\r\n        }\r\n        const currentColor = lerpColor(colors[colorIndex], colors[nextColorIndex], colorT);\r\n\r\n        // Create moving gradient with lighter colors\r\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n        gradient.addColorStop(0, `rgb(${currentColor.r}, ${currentColor.g}, ${currentColor.b})`);\r\n        gradient.addColorStop(1, `rgb(${255 - currentColor.r}, ${255 - currentColor.g}, ${255 - currentColor.b})`);\r\n\r\n        // Apply blur effect to the gradient\r\n        ctx.filter = 'blur(5px)';\r\n\r\n        // Draw gradient background\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Reset filter for subsequent drawing\r\n        ctx.filter = 'none';\r\n\r\n        // Draw food items\r\n        foodItems.forEach(item => {\r\n            ctx.save();\r\n            ctx.translate(item.x, item.y);\r\n            ctx.rotate(item.rotation);\r\n            ctx.font = `${item.size}px Arial`;\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n\r\n            // Add a white outline for better visibility\r\n            ctx.strokeStyle = 'white';\r\n            ctx.lineWidth = 3;\r\n            ctx.strokeText(item.emoji, 0, 0);\r\n\r\n            // Fill with black for contrast\r\n            ctx.fillStyle = 'black';\r\n            ctx.fillText(item.emoji, 0, 0);\r\n            ctx.restore();\r\n\r\n            item.y += item.speed;\r\n            item.rotation += item.rotationSpeed;\r\n            if (item.y > canvas.height + item.size) {\r\n                item.y = -item.size;\r\n                item.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const hauntedForest = (canvas, ctx) => {\r\n    const trees = [];\r\n    const fireflies = [];\r\n    const fog = [];\r\n\r\n    // Initialize trees\r\n    for (let i = 0; i < 20; i++) {\r\n        trees.push({\r\n            x: Math.random() * canvas.width,\r\n            height: Math.random() * 200 + 100,\r\n            width: Math.random() * 20 + 10,\r\n        });\r\n    }\r\n\r\n    // Initialize fireflies\r\n    for (let i = 0; i < 50; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            opacity: Math.random(),\r\n        });\r\n    }\r\n\r\n    // Initialize fog\r\n    for (let i = 0; i < 100; i++) {\r\n        fog.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 50 + 20,\r\n            speed: Math.random() * 0.2 + 0.1,\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = '#0a0a0a';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw trees\r\n        ctx.fillStyle = '#1a1a1a';\r\n        trees.forEach(tree => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(tree.x, canvas.height);\r\n            ctx.lineTo(tree.x - tree.width / 2, canvas.height - tree.height);\r\n            ctx.lineTo(tree.x + tree.width / 2, canvas.height - tree.height);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw fog\r\n        ctx.fillStyle = 'rgba(200, 200, 200, 0.05)';\r\n        fog.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speed;\r\n            if (particle.x > canvas.width + particle.radius) {\r\n                particle.x = -particle.radius;\r\n            }\r\n        });\r\n\r\n        // Draw fireflies\r\n        fireflies.forEach(firefly => {\r\n            ctx.beginPath();\r\n            ctx.arc(firefly.x, firefly.y, firefly.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${firefly.opacity})`;\r\n            ctx.fill();\r\n\r\n            firefly.x += Math.sin(Date.now() * 0.001) * firefly.speed;\r\n            firefly.y += Math.cos(Date.now() * 0.001) * firefly.speed;\r\n            firefly.opacity = Math.sin(Date.now() * 0.01) * 0.5 + 0.5;\r\n\r\n            if (firefly.x < 0) firefly.x = canvas.width;\r\n            if (firefly.x > canvas.width) firefly.x = 0;\r\n            if (firefly.y < 0) firefly.y = canvas.height;\r\n            if (firefly.y > canvas.height) firefly.y = 0;\r\n        });\r\n    };\r\n};\r\n\r\nexport const ghostlyApparitions = (canvas, ctx) => {\r\n    const ghosts = [];\r\n    const numGhosts = 5;\r\n\r\n    for (let i = 0; i < numGhosts; i++) {\r\n        ghosts.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 50 + 30,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            opacity: Math.random() * 0.5,\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = '#000033';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ghosts.forEach(ghost => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(ghost.x, ghost.y);\r\n            ctx.bezierCurveTo(\r\n                ghost.x - ghost.size / 2, ghost.y - ghost.size / 2,\r\n                ghost.x - ghost.size / 2, ghost.y + ghost.size / 2,\r\n                ghost.x, ghost.y + ghost.size\r\n            );\r\n            ctx.bezierCurveTo(\r\n                ghost.x + ghost.size / 2, ghost.y + ghost.size / 2,\r\n                ghost.x + ghost.size / 2, ghost.y - ghost.size / 2,\r\n                ghost.x, ghost.y\r\n            );\r\n\r\n            const gradient = ctx.createRadialGradient(\r\n                ghost.x, ghost.y, 0,\r\n                ghost.x, ghost.y, ghost.size\r\n            );\r\n            gradient.addColorStop(0, `rgba(255, 255, 255, ${ghost.opacity})`);\r\n            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n\r\n            ghost.y -= ghost.speed;\r\n            ghost.opacity = Math.sin(Date.now() * 0.001) * 0.2 + 0.3;\r\n\r\n            if (ghost.y + ghost.size < 0) {\r\n                ghost.y = canvas.height + ghost.size;\r\n                ghost.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const spiderwebOverlay = (canvas, ctx) => {\r\n    const webs = [];\r\n    const numWebs = 20;\r\n\r\n    for (let i = 0; i < numWebs; i++) {\r\n        webs.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 100 + 50,\r\n            rotation: Math.random() * Math.PI * 2,\r\n        });\r\n    }\r\n\r\n    const drawWeb = (x, y, size, rotation) => {\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.rotate(rotation);\r\n\r\n        ctx.beginPath();\r\n        for (let i = 0; i < 8; i++) {\r\n            const angle = (Math.PI * 2 / 8) * i;\r\n            ctx.moveTo(0, 0);\r\n            ctx.lineTo(Math.cos(angle) * size, Math.sin(angle) * size);\r\n        }\r\n\r\n        for (let r = size / 4; r < size; r += size / 4) {\r\n            ctx.moveTo(r, 0);\r\n            for (let i = 1; i < 8; i++) {\r\n                const angle = (Math.PI * 2 / 8) * i;\r\n                ctx.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);\r\n            }\r\n            ctx.closePath();\r\n        }\r\n\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    };\r\n\r\n    return () => {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        webs.forEach(web => {\r\n            drawWeb(web.x, web.y, web.size, web.rotation);\r\n        });\r\n    };\r\n};\r\n\r\n// Add these to your existing backgroundAnimations.js file\r\n\r\nexport const undeadGraveyard = (canvas, ctx) => {\r\n    const graves = [];\r\n    const zombies = [];\r\n    const fog = [];\r\n\r\n    // Initialize graves\r\n    for (let i = 0; i < 15; i++) {\r\n        graves.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height - Math.random() * 100 - 50,\r\n            width: Math.random() * 30 + 20,\r\n            height: Math.random() * 40 + 30\r\n        });\r\n    }\r\n\r\n    // Initialize zombies\r\n    for (let i = 0; i < 10; i++) {\r\n        zombies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            size: Math.random() * 30 + 20\r\n        });\r\n    }\r\n\r\n    // Initialize fog\r\n    for (let i = 0; i < 50; i++) {\r\n        fog.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 100 + 50,\r\n            speed: Math.random() * 0.2 + 0.1\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        // Dark, eerie sky\r\n        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n        gradient.addColorStop(0, '#0a0a1a');\r\n        gradient.addColorStop(1, '#1a0a1a');\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Moon\r\n        ctx.beginPath();\r\n        ctx.arc(canvas.width * 0.8, canvas.height * 0.2, 40, 0, Math.PI * 2);\r\n        ctx.fillStyle = 'rgba(255, 255, 200, 0.8)';\r\n        ctx.fill();\r\n\r\n        // Draw graves\r\n        ctx.fillStyle = '#333';\r\n        graves.forEach(grave => {\r\n            ctx.fillRect(grave.x, grave.y, grave.width, grave.height);\r\n            ctx.fillStyle = '#222';\r\n            ctx.fillRect(grave.x + grave.width * 0.1, grave.y, grave.width * 0.8, grave.height * 0.1);\r\n        });\r\n\r\n        // Draw zombies\r\n        zombies.forEach(zombie => {\r\n            ctx.beginPath();\r\n            ctx.arc(zombie.x, zombie.y - zombie.size, zombie.size * 0.5, 0, Math.PI * 2);\r\n            ctx.fillStyle = '#3a5';\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(zombie.x, zombie.y - zombie.size);\r\n            ctx.lineTo(zombie.x - zombie.size * 0.5, zombie.y);\r\n            ctx.lineTo(zombie.x + zombie.size * 0.5, zombie.y);\r\n            ctx.closePath();\r\n            ctx.fillStyle = '#3a5';\r\n            ctx.fill();\r\n\r\n            zombie.y -= zombie.speed;\r\n            if (zombie.y < canvas.height * 0.7) {\r\n                zombie.y = canvas.height;\r\n                zombie.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n\r\n        // Draw fog\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';\r\n        fog.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speed;\r\n            if (particle.x > canvas.width + particle.radius) {\r\n                particle.x = -particle.radius;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const bloodRain = (canvas, ctx) => {\r\n    const drops = [];\r\n    const splats = [];\r\n\r\n    for (let i = 0; i < 200; i++) {\r\n        drops.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            length: Math.random() * 20 + 10,\r\n            speed: Math.random() * 5 + 5\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(20, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw rain\r\n        ctx.strokeStyle = '#800';\r\n        ctx.lineWidth = 1;\r\n        drops.forEach(drop => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(drop.x, drop.y);\r\n            ctx.lineTo(drop.x, drop.y + drop.length);\r\n            ctx.stroke();\r\n\r\n            drop.y += drop.speed;\r\n\r\n            if (drop.y > canvas.height) {\r\n                drop.y = 0;\r\n                drop.x = Math.random() * canvas.width;\r\n\r\n                // Create a splat\r\n                splats.push({\r\n                    x: drop.x,\r\n                    y: canvas.height,\r\n                    size: Math.random() * 5 + 2,\r\n                    opacity: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        // Draw splats\r\n        splats.forEach((splat, index) => {\r\n            ctx.beginPath();\r\n            ctx.arc(splat.x, splat.y, splat.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(128, 0, 0, ${splat.opacity})`;\r\n            ctx.fill();\r\n\r\n            splat.opacity -= 0.005;\r\n            if (splat.opacity <= 0) {\r\n                splats.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const creepyCrawlies = (canvas, ctx) => {\r\n    const bugs = [];\r\n    const webNodes = [];\r\n\r\n    for (let i = 0; i < 50; i++) {\r\n        bugs.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 5 + 2,\r\n            speedX: Math.random() * 2 - 1,\r\n            speedY: Math.random() * 2 - 1\r\n        });\r\n    }\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n        webNodes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw web\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        ctx.beginPath();\r\n        webNodes.forEach((node, index) => {\r\n            webNodes.slice(index + 1).forEach(otherNode => {\r\n                ctx.moveTo(node.x, node.y);\r\n                ctx.lineTo(otherNode.x, otherNode.y);\r\n            });\r\n        });\r\n        ctx.stroke();\r\n\r\n        // Draw and move bugs\r\n        ctx.fillStyle = '#400';\r\n        bugs.forEach(bug => {\r\n            ctx.beginPath();\r\n            ctx.arc(bug.x, bug.y, bug.size, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            bug.x += bug.speedX;\r\n            bug.y += bug.speedY;\r\n\r\n            if (bug.x < 0 || bug.x > canvas.width) bug.speedX *= -1;\r\n            if (bug.y < 0 || bug.y > canvas.height) bug.speedY *= -1;\r\n\r\n            // Occasionally change direction\r\n            if (Math.random() < 0.01) {\r\n                bug.speedX = Math.random() * 2 - 1;\r\n                bug.speedY = Math.random() * 2 - 1;\r\n            }\r\n        });\r\n    };\r\n};","import React, { useRef, useEffect, useCallback } from 'react';\r\nimport {\r\n    starryNight, floatingBubbles,\r\n    gradientWave, particleNetwork, galaxySpiral,\r\n    rainbowWaves, geometricShapes, fireflies,\r\n    matrixRain, quantumField, electricStorm,\r\n    cosmicDust, neonPulse, auroraBorealis, oceanWaves,\r\n    neuralNetwork,\r\n    dnaHelix, snowFall, realisticRain, autumnLeaves, realisticClouds, fireflyForest, fallingFoodFiesta,\r\n    hauntedForest,\r\n    ghostlyApparitions,\r\n    spiderwebOverlay,\r\n    undeadGraveyard,\r\n    bloodRain,\r\n    creepyCrawlies,\r\n} from './backgroundAnimations';\r\n\r\nconst AnimatedBackground = ({ animationName, fallbackAnimation = 'geometricShapes', fps = 60, style }) => {\r\n    const canvasRef = useRef(null);\r\n    const animationRef = useRef(null);\r\n\r\n    const setupCanvas = useCallback(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n\r\n        const animations = {\r\n            starryNight, floatingBubbles, gradientWave, particleNetwork, galaxySpiral,\r\n            rainbowWaves, geometricShapes, fireflies, matrixRain, quantumField,\r\n            electricStorm, cosmicDust, neonPulse, auroraBorealis, oceanWaves,\r\n            neuralNetwork, dnaHelix, snowFall, realisticRain, realisticClouds,\r\n            fireflyForest, autumnLeaves, fallingFoodFiesta,  hauntedForest,\r\n            ghostlyApparitions,\r\n            spiderwebOverlay,\r\n            undeadGraveyard,\r\n            bloodRain,\r\n            creepyCrawlies,\r\n        };\r\n\r\n        let animation = animations[animationName];\r\n\r\n        if (!animation) {\r\n            console.warn(`Animation \"${animationName}\" not found. Using fallback animation.`);\r\n            animation = animations[fallbackAnimation] || animations.geometricShapes;\r\n        }\r\n\r\n        return animation(canvas, ctx);\r\n    }, [animationName, fallbackAnimation]);\r\n\r\n    useEffect(() => {\r\n        const animate = () => {\r\n            const animation = setupCanvas();\r\n            let lastTime = 0;\r\n            const frameInterval = 1000 / fps;\r\n\r\n            const loop = (currentTime) => {\r\n                animationRef.current = requestAnimationFrame(loop);\r\n\r\n                const deltaTime = currentTime - lastTime;\r\n                if (deltaTime >= frameInterval) {\r\n                    lastTime = currentTime - (deltaTime % frameInterval);\r\n                    animation();\r\n                }\r\n            };\r\n\r\n            animationRef.current = requestAnimationFrame(loop);\r\n        };\r\n\r\n        animate();\r\n\r\n        const handleResize = () => {\r\n            if (canvasRef.current) {\r\n                canvasRef.current.width = window.innerWidth;\r\n                canvasRef.current.height = window.innerHeight;\r\n                setupCanvas();\r\n            }\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            if (animationRef.current) {\r\n                cancelAnimationFrame(animationRef.current);\r\n            }\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, [fps, setupCanvas]);\r\n\r\n    return (\r\n        <canvas\r\n            ref={canvasRef}\r\n            style={{\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                zIndex: -1,\r\n                ...style\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport {\r\n    AnimatedBackground,\r\n    starryNight,\r\n    floatingBubbles,\r\n    gradientWave,\r\n    particleNetwork,\r\n    galaxySpiral,\r\n    rainbowWaves,\r\n    geometricShapes,\r\n    fireflies,\r\n    matrixRain,\r\n    quantumField,\r\n    electricStorm,\r\n    cosmicDust,\r\n    neonPulse,\r\n    auroraBorealis,\r\n    fallingFoodFiesta,\r\n    hauntedForest,\r\n    ghostlyApparitions,\r\n    spiderwebOverlay,\r\n    undeadGraveyard,\r\n    bloodRain,\r\n    creepyCrawlies,\r\n\r\n\r\n\r\n\r\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}